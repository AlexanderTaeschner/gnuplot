Table of contents:
==================

    * Installation from sources
	- For the impatient provides a quick overview of configuration and
	  compilation instructions. 
	- Lists those options to the configure shell script which are
	  unique to gnuplot.
	- Compiling by config/makefile.* for specific platforms.
    * More details about ./configure --with-PACKAGE[=OPTION]
    * Platform compiler problems
    * Environment variables
	- The environment variables used by running gnuplot.
    * How to test gnuplot
    * Installing WPS object for gnuplot on OS/2
	- How to install WPS icon for drag&drop.
    * Front-ends for gnuplot
	- Few notes about graphical front-ends for gnuplot.

  The description of preprocessor options previously found here has
been moved to a new file called PORTING. Generic installation
instructions for `configure', such as distributed with FSF/GNU
packages, are in INSTALL.gnu.

If you're installing a binary package, you may still want to check out
some sections of this document, particularly the one discussing
environment variables.


Installation from sources
=========================

For the impatient
-----------------

   Configuration options are in the Makefile and in src/term.h, which
selects the set of terminal drivers to be compiled in.  

   The recommended way to configure both of these is the GNU-style
"./configure" script described below, and also in INSTALL.gnu.

   A complete overview of configure options is below in the Basic
Installation section. On platforms which do not support GNU
autoconf/configure, ie. most non-Unix platforms, look for a makefile
that looks suitable in the "config" directory.  Check "config/README"
to see which of them to use for which platform.

File location defaults
----------------------

PREFIX                          /usr/local
gnuplot                         PREFIX/bin
gnuplot_x11                     PREFIX/libexec/gnuplot/$VERSION
gnuplot.1                       PREFIX/man/man1
gnuplot.gih                     PREFIX/share/gnuplot/$VERSION

   The only files where the runtime location is defined at compile time are
gnuplot.gih and show.c. This is important if gnuplot is not installed 
by running 'make install'.

   The default path for the help library, gnuplot.gih, can be controlled in
several different ways:

 o use configure's --with-gihdir option to specify the full path to the
   directory where gnuplot.gih is to be installed, e.g.
   ./configure --with-gihdir=/opt/docs

 o use configure's --datadir= option to specify a version and package
   independent data dir prefix, e.g.
   ./configure --datadir='/opt/docs'
   gnuplot will look for the online help file, gnuplot.gih, in
   /opt/docs/gnuplot/$VERSION.

 o with configure's --prefix= option, eg.
   ./configure --prefix=/gnuplot
   gnuplot will look for the online help file, gnuplot.gih, in
   /gnuplot/share/gnuplot/$VERSION.
   Attention: This option affects the location of *all* installed files!

 o at make time, eg.
   make HELPFILE='/gnuplot/docs/gnuplot.gih'
   gnuplot will look for the online help file /gnuplot/docs/gnupot.gih.

 o at execution time by specifying the helpfile with the environment
   variable GNUHELP (see "Environment Variables" below).

   The default location of the main executable can be controlled in 
different ways:

 o with configure's --prefix= option, eg.
   ./configure --prefix=/gnuplot
   gnuplot will be installed as /gnuplot/bin/gnuplot.
   Attention: This affects the location of *all* installed files!

 o with configure's --bindir= option, eg.
   ./configure --bindir='/gnuplot/bin'
   gnuplot will be installed as /gnuplot/bin/gnuplot.

 o at make time, eg.
   make bindir='/gnuplot/bin'
   gnuplot will be installed as /gnuplot/bin/gnuplot.

   The default location of the additional executable, like gnuplot_x11, 
can be controlled in different ways:

 o with configure's --prefix= option, eg.
   ./configure --prefix=/gnuplot
   gnuplot_x11 will be installed as /gnuplot/libexec/gnuplot/4.0/gnuplot_x11.
   Attention: This affects the location of *all* installed files!

 o with configure's --libexecdir= option, eg.
   ./configure --libexecdir='/gnuplot/lib'
   gnuplot_x11 will be installed as /gnuplot/lib/gnuplot/4.0/gnuplot_x11

 o at make time, eg.
   make X11_DRIVER_DIR='/gnuplot/lib/4.0'
   gnuplot_x11 will be installed as /gnuplot/lib/4.0/gnuplot_x11

If you don't install the program at the place chosen by ./configure,
e.g. by overriding the "prefix" at "make install" time, files written
by the `save' command cannot be used as scripts on Un*x platforms, so
this should be avoided.  There is no way to specify the location of
the executables during runtime. Other platforms are not affected by
this.

   The gnuplot demo files are not installed by default, mainly because
there is no universally agreed place where such files should go.
If desired, they should be copied manually to a location of choice.

Unix, configure
---------------

   On Unix, use
$ ./configure
$ make
[ Optionally run demos--see "How to test gnuplot" below. ]
$ make install

   If gcc is installed, it is used by default. A different compiler can be
used by passing its name to configure:

$ ./configure CC=c89
 
   Any environment settings for CFLAGS are included into the Makefile,
so please make sure that these are really needed.
 
   There are several options available for configure that you may want
to change.  A complete list of options is available through

$ ./configure --help

   The options relevant to gnuplot are listed below:

  --prefix=PREFIX         Install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX	  Install architecture-specific file in EPREFIX
			  [PREFIX]
  --bindir=DIR            user executables in DIR [EPREFIX/bin]
			  The gnuplot binary is installed this directory
  --libexecdir=DIR        program executables in DIR [EPREFIX/libexec]
			  gnuplot_x11 goes into $libexecdir/gnuplot/<version>.
  --datadir=DIR           Read-only architecture-independent data in DIR
                          [PREFIX/share]. The gnuplot help file is installed
                          in this directory.
  --libdir=DIR            object code libraries in DIR [EPREFIX/lib]
  --includedir=DIR        C header files in DIR [PREFIX/include]
  --mandir=DIR            Man documentation in DIR [PREFIX/man]
  --with-x          (*)   use the X Window System
  --with-lasergnu         install lasergnu printer script
  --with-linux-vga        use the Linux SVGA console driver
                          (requires /usr/lib/libvga)
  --with-ggi[=DIR]        enable the ggi driver (EXPERIMENTAL)
  --with-xmi[=DIR]        ggi's xmi support for pm3d (EXPERIMENTAL)
  --with-readline   (*)   use the builtin minimal readline function (default)
  --without-readline      do not use the builtin readline function
  --with-readline=gnu     use the GNU readline library (4.2 or newer required)
  --with-readline=DIR     Specify the location of GNU readline
  --enable-history-file   use history file (requires GNU readline)
  --with-plot[=DIR]       use the Unix plot library
  --with-png[=DIR]  (*)   where to find the png library
  --with-gd[=DIR]   (*)   where to find Tom Boutell's gd library
  --with-gif=png          'set term gif' produces png images instead
                          (libgd version >= 1.8) 
  --with-pdf[=DIR]  (*)   enable pdf terminal 
                          (requires PDFLib)
  --with-cwdrc            check current directory for .gnuplot file,
                          normally disabled for security reasons
  --with-row-help         format help and subtopic tables by row (default)
  --without-row-help (*)  format help and subtopic tables by column
  --without-tutorial      do not build LaTeX tutorial
  --disable-mouse         disable mouse for the x11 terminal
  --disable-pm3d          disable pm3d
  --disable-filledboxes   disable filledboxes style
  --disable-relative-boxwidth   disable relative_boxwidths
  --enable-thin-splines   enable thin plate splines
  --enable-iris           enable IRIS terminal (IRIS4D only)
  --enable-mgr            enable MGR terminal
  --enable-rgip           enable Redwood Graphics Interface Protocol

Options marked with (*) are enabled by default, ie. these features or
packages are used if configure detects them even if the corresponding
option is not specified.  Please note that the `--with-PACKAGE'
options can have additional arguments:

 o `--with-PACKAGE' is equivalent to `--with-PACKAGE=yes'
 o `--with-PACKAGE=no' disables checking for PACKAGE. It has the same
   effect as `--without-PACKAGE'.
 o `--with-PACKAGE=DIR' checks for PACKAGE in DIR

Unix, no configure
------------------

  The older, now strongly disfavoured way is to copy config/makefile.unx 
  to Makefile, then look through the Makefile to see if you need to make 
  any changes.  See especially the HELPDEST and TERMFLAGS variables.  Edit 
  if needed.  Alternatively, all these variables may be set as command 
  line arguments to 'make'. For example:

   Next tune term.h to choose which terminal drivers you wish to
   enable.  If you want to support gif output, you need to download,
   compile and install the gd library : see term/gif.trm for details.

   If you want to support png output (free gif alternative), you need
png and z libraries : see term/png.trm for details.  Note that the
png library will probably not compile without an ANSI/ISO C compiler.

        make <MACHINE> HELPDEST='/usr/um/misc/lib' \
                DEST='/usr/um/misc/bin' READLINE=

  Type
      make

  If that works, try
      make install

VMS
---

   John Hasstedt <John.Hasstedt@sunysb.edu> has written configure.vms,
a command file that creates the necessary make and option files to build
gnuplot.  See the file for instructions on using it.  If you have problems
with it, the old build files are still included; instructions for using
them follow.

   On VMS, you can use MMS, MMK, or another make utility, or you can
use BUILDVMS.COM.  The supplied files work with Alpha/VMS V6.2 and
DECC V5.7; you may get warnings or more serious errors depending on
the versions of the C compiler, the C run-time libraries, and VMS on
your system.

  To compile using MMK:
     MMK/DESCRIPTION=MAKEFILE.VMS
  To compile using MMS on VAX:
     MMS/DESCRIPTION=MAKEFILE.VMS
  To compile using MMS on Alpha:
     MMS/DESCRIPTION=MAKEFILE.VMS/MACRO=__ALPHA__=1

  Alternatively, you can use MAKE_VMS.COM.  This command file will run
MMK or MMS to build gnuplot.  If you don't have either one installed, it
will use the command file.  The first parameter on the command line is
the compiler you want to use (default DECC).

  It may sometimes be useful to add  `/IGNORE=WARNING' to the `MMS' call.

  To compile using GNUC or VAXC:
     add /MACRO=GNUC or /MACRO=VAXC to the above command
  To compile with another make utility:
     check the documentation of your utility to specify the description
     file and any necessary macros (__ALPHA__, GNUC, or VAXC)
  Or if you don't have a suitable make:
     @BUILDVMS
  To tell gnuplot where to find the help library:
     $ define gnuplot$help disk:[directory]gnuplot.hlb
  Alternatively, put the help in the main system help library.

AmigaOS
-------

Using Aztec C 5.2a
      make -f makefile.ami
Using SAS/C 6.1 or later versions
      smake -f makefile.amg
      You can also copy makefile.amg to smakefile and just type `smake'.

      At the beginning of makefile.amg you will find a configuration
      section where you have to adjust all settings which control the build
      process. Most important is probably to select the terminal devices
      which should be supported. You can create a version offering
      png graphics as well as gif support. Use the appropriate settings
      for CPU and MATH to compile for a specific machine type.
      Be sure to enable only those devices for which you have the 
      necessary software already installed. Also ensure that the
      libraries and the sources are all compiled using the same
      settings for CPU and MATH.
Using gcc: see Unix

Atari/TOS
---------

Using gcc 2.x as unix cross- or native compiler
	make -f makefile.st
(Edit top of makefile.st for name of crosscompiler or choose native setting)
Using PureC
	use gnuplot.prj
Using TurboC
	use gnuplot.prj
(Edit gnuplot.prj according to notes at the beginning)

MS-Windows
----------

You'll need a help compiler from Microsoft to build the on-line help
for gnuplot.  Some versions of that, including the one coming with
version 4.0 of MSVC++ and with Borland C++ Builder 1.0, appear unable
to compile gnuplot.rtf.  The freely available "Help Workshop" download
from Microsoft is known to work, so in case of down you should get and
use that.

General install instructions:
 Change into the "src" subdirectory.
 Build the program using one of the ways shown below this note.
 Put wgnuplot.exe, wgnuplot.hlp and wgnuplot.mnu all in a single
  directory somewhere.  You may want to add that directory to your PATH.
 There's no installer for gnuplot, so if you want a desktop link,
  program manager group or an association of *.plt or *.gpl files to
  wgnuplot, you'll have to do all that yourself.

Using Visual C++ and compiling for Windows (32-bit, i.e. 9x and NT family)
      nmake -f ..\config\makefile.nt
 or
      copy ..\config\makefile.nt makefile
      nmake

Using the MinGW32 port of gcc: you need parts of the Micrsoft SDK for the
moment.
      copy ..\config\makefile.mgw makefile
  Look through the Makefile to see if you need to make any changes.
      make 
      make install

Using the Cygwin port of gcc, which includes MinGW32: you need parts of
the Microsoft SDK for the moment.
      copy ..\config\makefile.cyg makefile
  Look through the Makefile to see if you need to make any changes.
      make

Using Borland C++ 32 bit compilers, like the freely downloadable BCC55:
      copy ..\config\makefile.win makefile.win
  Look through makefile.win to see if you need to make any changes.
  You'll probably have to change TC and some others.
      make -fmakefile.win WIN32=1
      
[NOTE: the 16-bit Windows version no longer work.  gnuplot has become
too large.]

Using Microsoft C 7.0 and compiling for MS-Windows (16-bit)
      copy ..\config\makefile.msw makefile
  Look through the Makefile to see if you need to make any changes.
      nmake

Using Borland C++ 3.1 and compiling for MS-Windows (16-bit)
      copy ..\config\makefile.win makefile.win
  Look through the Makefile to see if you need to make any changes.
  You'll probably have to change TC and some others.
      make -fmakefile.win


MSDOS
-----

Using DJGPP (32-bit DOS port of GNU CC)
  Basically the same as Unix+configure. Andris Pavenis <pavenis@lanet.lv>
  has contributed a shell script which makes the whole process even easier:
  just run djconfig.sh, and then make.
  Only if you don't have a complete Unix toolset installed with your
  DJGPP, it is recommended to use makefile.dj2 instead:
      copy makefile.dj2 makefile
      make

[NOTE: the 16-bit DOS versions of gnuplot no longer work.  gnuplot has
outgrown this platform.]

Using Microsoft C 7.0 targetting 16-bit DOS
      copy makefile.msc makefile
      nmake 

Using Borland C++ 3.0 targetting 16-bit DOS
      copy makefile.tc makefile
  Edit makefile to change TC, BIN, BGI, BGIOBJ. You may also want to turn
  off overlays (See manual for more on overlays).
      make

You'll want to copy the compiled executable and gnuplot.gih to a
directory on your PATH to make them easily usable.

The file gnuplot.gih is needed for help on the PC.
If the file gnuplot.gih is not in the default directory, then use:
    set GNUHELP={full path name of gnuplot.gih}

OS/2
----

To compile under OS/2 (2.x and above) you need the development suite EMX 0.9
(including gcc). You should also have GNU Make and IBM's IPFC  (Information
Presentation Facility Compiler, available from the Developer's Toolkit;
nowadays it's accessible through an IBM website for free!).

At the beginning of makefile.os2 you will find a configuration section where
you have to adjust all settings which control the build process. Most important
is probably to select the terminal devices which should be supported. You can
create a version offering PM graphics as well as X11 support (to use with
XFree86). Support for these two terminals is provided by additional
executables.

Be sure to enable only those devices for which you have the necessary software
already installed. Also ensure that the libraries and the sources are all
compiled (not) using the '-Zmt' flags.

Executing 
    make -f makefile.os2
should create a default build while
    make -f makefile.os2 help
will show you all pre-defined targets.

See other sections of the manuals for more information about installing/using
gnuplot on OS/2.


More details about ./configure --with-PACKAGE[=OPTION]
======================================================

Every `--with-PACKAGE' option sets a `with_package' variable in configure.
Depending on how `--with-PACKAGE' was invoked, there are only three different
possible values for the `with_package' variable:

 Option                   $with_package
----------------------------------------
(not specified)           yes or no; default set in configure
--with-package            yes
--with-package=yes        yes
--with-package=no         no
--with-package=DIR        DIR
--without-package         no

In gnuplot, the following --with-PACKAGE options are available. The
--with-PACKAGE=DIR form is always required if a package is installed in a
non-default location that is not searched by the preprocessor or linker.

  --with-readline

   Use gnuplot's builtin readline function. This is enabled by default.

  --without-readline

   (same as --with-readline=no) Do not use gnuplot's builtin readline function.

  --with-readline=gnu

   Use the GNU readline library instead of gnuplot's builtin readline.
   Version 4.2 or better is required.

   Please note that there is a bug in GNU readline up to and including 4.3
   that makes gnuplot exit if the terminal window is resized. A fix is
   described at
   http://sourceforge.net/tracker/index.php?func=detail&aid=608874&group_id=2055&atid=102055 .

  --with-readline[=DIR]

   Use the GNU readline library instead of gnuplot's builtin readline.
   This form is required if GNU readline is not installed in a default
   location.

  --with-gd[=DIR]

   Dto. for Thomas Boutell's gd library. configure determines whether
   the found library supports gif, png, jpeg, and freetype.  This option
   is on by default, i.e. configure will check if the library exists,
   and use it if found, if you don't specify any option regarding this
   package.

  --with-png[=DIR]

    Dto. for the png library. This option is on by default.

  --with-pdf[=DIR]

    Dto. for the pdf library. This option is on by default.

  --with-plot[=DIR]

    If used without the DIR argument, this option selects the standard
    UNIX plot library, if available. If used with the DIR argument,
    configure looks for the plot library from GNU plotutils version 2.2
    or better. The option is off by default.

   --with-gif=png

    If specified, the gif driver produces png images instead of gif.
    Other arguments to this option are ignored! This feature exists
    mainly for backwards compatibility with old plot scripts, and is
    off by default.


Platform compiler problems
==========================

This section addresses trouble shooting and testing issues. Userland questions
are answered in the FAQ.

Platform and compiler notes
---------------------------

   Generally, if you think that configure has made a mistake in detecting
platform features, you should consider that a bug either in GNU autoconf
or in gnuplot's use of it, which you should report.  As a workaround
you can override such faulty tests in a site-wide collection
of preset configure test results, or manually override them after running
configure.

   Example:
configure was for some reason unable to detect the memset() function, but
you are sure it is ok to use on your platform.  To fix that, you'll have
to edit the generated config.h and change the line 

	/* #undef HAVE_MEMSET */ 
to
	#define HAVE_MEMSET 1

   Note that changing such defines from outside config.h, eg. via
'make DEFS=-DHAVE_MEMSET' is wrong, because config.h will usually
override such changes.  Also note that this change will be lost 
whenever you re-run configure.

 - gcc -ansi

   If you wish to compile with gcc -ansi (CC='gcc -ansi -pedantic'
  ./configure), additional platform specific defines may be necessary
  to include non-ANSI function prototypes. E.g. on Solaris,
  -D__EXTENSIONS__ is needed. Otherwise, non-declared functions not
  returning int will be assumed to return int, with possibly
  dangerous consequences. Especially scpecfun.c is vulnerable here.

 - HP-UX 9.x
   It is recommended to use gcc, although the native compiler cc may
  work with warnings.

 - HP-UX 10.x and above
   GCC has known problems on this platform if configured to use HP's
  assembler. The telltale symptom are tic labels all ending up at
  position 0.0. So either make sure you use a GCC configured to use
  GNU as, or use HP's ANSI cc (the unbundled one).

 - Alpha CPUs
   The Alpha family of CPUs exhibits somewhat unusual behaviour in the
  case of floating point exceptions.  In default mode, it doesn't comply
  to IEEE floating point standards very well, leading to crashes of the
  whole program because of a floating point exception in certain cases.
  In order to avoid these, you may want to turn on IEEE compatibility
  mode in your compiler flags. For DEC cc, the relevant option is
  `-ieee', for GCC, it's `-mieee'.

 - IRIX 6.x
   If you want to use the png terminal, you must install your own
  versions of libpng and zlib. The versions supplied with the OS
  are too old. Note that you need be very careful to select the
  correct compiler options/ABI's.

 - SunOS 4.x
   An ANSI/ISO C compiler should be used to compile gnuplot. It is
  recommended to install gcc. If this is not an option, the system
  compiler cc can be made to work with Wietse Venema's unproto tool.
  See entry below for instructions.

  As of 1998-11-18, gnuplot compiles again with the native compiler cc.

 - System V.2/Ultrix 4.x/M88 SysV.3
   An ANSI/ISO C compiler should be used to compile gnuplot. It is
  recommended to install gcc. If this is not an option, the system
  compiler cc can be made to work with Wietse Venema's unproto tool.

  Note that as of gnuplot-4.0, the alternative tool ansi2knr is
  included with the gnuplot source distribution and should
  automatically be used by automake to do this job for you, so you
  shouldn't need unproto any longer.

  unproto is available from
  ftp://ftp.win.tue.nl/pub/unix/unproto5.shar.Z
  ftp://ftp.porcupine.org/pub/lang/unproto5.shar.Z

  After installing unproto, configure gnuplot with

  (Bourne shell syntax)

  $ cd gnuplot-4.0
  $ CC='cc -B/full/path/to/unproto/dir/ -tp' ./configure <options>

  or (C shell syntax)

  $ cd gnuplot-4.0
  $ env CC='cc -B/full/path/to/unproto/dir/ -tp' ./configure <options>

  The required compiler options shown here are for System V.2.  For other
  platforms, consult the unproto documentation. `/full/path/to/unproto/dir'
  is the full path name of the directory where unproto is installed. It is
  not necessary to "install" unproto, one can just create a subdirectory
  in gnuplot's source directory and use it from there.

Environment variables
=====================

See 'help environment'.

If the environment variable GNUTERM is found, it is used as the
terminal type.  Otherwise, in some cases the variable TERM will be
used, or the hardware may be detected automatically.  If all else
fails, a compile-time default will be used.

The PC version looks for the environment variable GNUPLOT to contain
the name of the directory from which to load the initialization file
GNUPLOT.INI and also to be used as the home directory in ~
substitution.  See the help on 'start_up' for more information.

HOME is examined as a directory where a .gnuplot startup file might be
found. See help on "start-up". The Atari/MTOS version uses
GNUPLOTPATH.

If defined, the environment variable GNUHELP is used for the name of
the .gih help file, otherwise HELPFILE (defined in makefile or
command.c) is used.

The VMS version looks for the logical name GNUPLOT$HELP to locate the
help library.

The usual system-wide environment variable is used to locate a command
line shell to be used for executing commands and starting sub-shells.
On the DOS family of platforms (including all versions of Windows and
OS/2) the variable looked at is COMSPEC.  Other platforms will consult
SHELL.

If gnuplot is configured to use its own, private history file, the
size of this file can be set via GNUPLOT_HISTORY_SIZE. The default is
666 (lines).

If gnuplot is configured for the X11 window system, it looks for the
X11 driver program in GNUPLOT_DRIVER_DIR.  The default position used
for the driver is fixed by the build process, so you should only have
to set this if you moved gnuplot_x11 away from its original location.

GDFONTPATH is the directory where png terminal searches TrueType and
Adobe Type 1 fonts.  You should set it to directory where files like 
arial.ttf and Symbol.pfa exist.

GNUPLOT_DEFAULT_GDFONT is the default font to be used by the png and
jpeg terminal types. This must either be a full path to the font file
or the face name of a font found in the GDFONTPATH search path.
    
GNUPLOT_FONTPATH is used by the postscript driver as search path for
postscript (Adobe Type 1 and Type 2) fonts.  It is also used by the
svg driver to look for svg or Adobe cef fonts.

GNUPLOT_LIB may be used to define additional search directories for
data and command files. The variable may contain a single directory
name, or a list of directories separated by a platform-specific path
separator, eg. ':' on Unix, or ';' on DOS/Windows/OS/2/Amiga
platforms. The contents of GNUPLOT_LIB are appended to the `loadpath`
variable, but not saved with the `save` and `save set` commands.

GNUFITLOG holds the name of a file that saves fit results. The default
is fit.log. If the name ends with a "/" or "\", it is treated as a
directory name, and "fit.log" will be created as a file in that
directory.

The CGI drivers need the CGIPATH environment variable to set the path
to the CGI agents, and the CGIDISP and/or CGIPRNT environment variables
to the CGI agents, and the CGIDISP and/or CGIPRNT environment variables
to set the output devices.

If creating dynamically linked executables, it may be necessary to add
flags to the LIBS variable in Makefile to make sure gnuplot finds all
required libraries at runtime.  Systems like SunOS and Solaris use -R
to specify the runtime library search path, whereas OSF/Dec Unix, Irix
and Linux use -rpath. If this is not possible, the LD_LIBRARY_PATH
environment variable should be set.  Generally it's recommended to
install shared libraries only in places that are already searched by
the linker without such options.  LD_LIBRARY_PATH is the second-best
choice.


How to test gnuplot
===================

No comprehensive test suite for gnuplot's features has been written to date.
However, the supplied demo files provide a good method of testing commonly
used features. All command line examples below assume Unix Bourne shell
syntax.

   The demo files can be run interactively by eg.

$ cd gnuplot/demo
$ gnuplot simple.dem
    or
$ GNUPLOT_DRIVER_DIR=../src ../src/gnuplot simple.dem

and gnuplot prompts the user to "Hit return to continue" to cycle through
all the plots (the GNUPLOT_DRIVER_DIR= part is only required if you are
using the X11 or BeOS plotting device and the gnuplot_x11/gnuplot_be binary
has not been installed yet, or if you want to test the external binaries you
just compiled at the same time).

   To run the demos in a specified file without interaction, one can use

$ gnuplot simple.dem </dev/null
$ GNUPLOT_DRIVER_DIR=../src ../src/gnuplot simple.dem </dev/null

   To run all demos non-interactively, use

$ gnuplot all.dem </dev/null
$ GNUPLOT_DRIVER_DIR=../src ../src/gnuplot all.dem </dev/null
   For convencience, the special make target 'check' will run the above
   if you run it from the demo directory of the source tree:
$ make check

   To use a different plotting device than the default (usually X11 under
Unix), use eg.

$ GNUTERM=dumb GNUPLOT_DRIVER_DIR=../src ../src/gnuplot all.dem </dev/null
or
gnuplot> set term dumb
gnuplot> load 'all.dem'

   To test the capabilities of the terminal you are using, there is the
'test' command:

$ gnuplot

        G N U P L O T
        Unix version 4.0
        patchlevel 0
        last modified Tue Apr 13 13:13:13 GMT 2004

        Copyright(C) 1986 - 1993, 1998, 2004
        Thomas Williams, Colin Kelley and many others

        Send comments and requests for help to gnuplot-info@lists.sf.net
        Send bugs, suggestions and mods to gnuplot-bugs@lists.sf.net

Terminal type set to 'x11'
gnuplot> test

   `test` creates a display of line and point styles and other useful things
appropriate for the terminal you are using.


Installing WPS object for gnuplot on OS/2
=========================================

GNUPLOT can be run from the command line of an OS/2 session, or can be set up
as a program object in the WPS.

GNUPLOT starts up as a command line session which accepts the usual GNUPLOT 
input. The Presentation Manager (PM) window for graphics display is only opened
when the first 'plot' or 'splot' command is entered.

If GNUPLOT is set up as a program object, it can be configured for 'drag and 
drop' in the usual way, by specifying '%*' as the program parameter.

The PM window has facilities for printing the plot, for changing the fonts 
used in the plot, and so on. These of course are handled through the usual 
PM interface. In addition, you can 'drop' a font onto the window to change 
the font.

The usual GNUPLOT commands can also be used to produce output on supported
devices.

Settings and the positions and sizes of the windows can be saved in the file
gnushell.ini. This file is saved in the program's working directory; several
different directories can be set up (as program objects) with different 
options, if you wish.

PM terminal is fully mouse-capable. Type 'm' to switch the mouse on/off (see
'help mouse' for more details), or 'h' for the full list of current hotkeys
(see also 'help bind').


Front-ends for gnuplot
======================

 o See gnuplot web page
	http://gnuplot.sourceforge.net/links.html
   for an up-to-date version of gnuplot front-ends

 o Bruce Ravel <ravel@phys.washington.edu> has written a new version of
   gnuplot-mode for GNU emacs and XEmacs. This version is based on
   the gnuplot.el file by Gershon Elber which used to be included with 
   earlier versions of gnuplot's source distribution. The package is
   available from http://feff.phys.washington.edu/~ravel/gnuplot/.
   As of gnuplot 4.0 Bruce's version of gnuplot-mode is included 
   with the gnuplot distribution, so you should already have it.

