PM, 25.1.2002: I think that the following should be kept somewhere among 
the programmers documentation:


TECHNICAL DETAILS FOR MOUSE COMMUNICATION:

    On OS/2, the communication between gnupmdrv and gnuplot is implemented by
  shared memory and an event semaphore. 
    On Unix, we decided to use a bidirectional pipe for the ipc communication
  between gnuplot_x11 and gnuplot. The readline interfaces were modified to
  listen to both stdin and the ipc file descriptor.  (Well, that's just the
  usual way).  Note that if compiling with gnu readline, you must have a gnu
  readline version > 2.2 (3.0).  This will not be a major drawback, as 2.2 is
  out for years now and the current gnu readline version is 4.0. The
  communication code is located in gpexecute.inc.
    On Windows, gnuplot+its terminal are in one executable, so we can call
  directly do_event(&ge); available in the same executable.


TECHNICAL DETAILS FOR FAST MOUSE ROTATION OF 3D SURFACES:

  For splots (3d) the data is cached and can therefore be redrawn very quickly.
  This enables smooth rotating and zooming of splots.



*****************************************************************************

THE ORIGINAL VERSION OF THIS FILE - IT IS OBSOLETE NOW AND CAN BE REMOVED:



ANNOUNCEMENT OF MOUSE SUPPORT FOR PM AND X11 TERMINALS
------------------------------------------------------

		Hello everybody,

We worked hard in the last weeks (months...) to get the best of two different
mouse versions merged.  Note that the OS/2 PM terminal is mouse-capable since 
March 1998, and we have been running mouseable X11 terminal since October 1999.
Those two versions were rewritten in order to be open for an easy accomodation 
of mouse capabitities of other terminals (move of most functions from 
stand-alone terminals to gnuplot core and an addition of new terminal entries.)
Now we have got the enclosed mouse-capable version which works (again) in PM 
and X11 terminals.

The usage of the mouse is mainly self-explanatory.  Just type 'h' in the
graph window (hereafter we mean either PM or X11 terminal window) and a short
overview of commands will pop up.  The mouse is turned on and off with the
hotkey 'm'. The mouse is *on* by default unless turned off in the gnuplot
startup script. Furthermore, the PM terminal contains a menu where some of the 
mouse actions are available via mouse click; in addition, OS/2 can run both 
mouseable PM and X11 terminals (simultaneously :-).


Besides the mouse stuff, some additional topics were implemented:

 -  a `bind' command to bind `hotkeys' to any gnuplot commands.
    see `help bind'. Some keys are pre-bound to builtin functions
    which can be overridden.
 -  a configurable mouse behaviour via `set mouse'.
    see `help mouse'.
 -  added an `else' to the `if' command.
    see `help if'.  This was mainly done to enable toggle
    actions for the `bind' command.
 -  added a `set historysize' command when using gnu readline.
    see `help historysize'.
 -  added a `set term x11 driver <path>' option to the x11 driver.
    This enables changing of the default driver name `gnuplot_x11'.
    The default driver name can also be changed at compile time
    by the option --with-X11-driver=<path>. This is useful, if
    several gnuplot versions exist on one system. See `help x11'.
 -  added `set term x11 [no]persist' and `set term x11 [no]raise'
    options to the x11 driver. Setting these will override the
    command line or Xresource settings. (Un)setting these will
    take immediately effect, so the behaviour of an open x11
    driver's window can be changed.
  - introduced a `set label <label options> pointstyle <style>' option.
    If this option is set, a point with <style> (like pointstyles in
    other commands) is drawn at the selected position and the text is
    displaced a bit.  The size is taken from `set pointsize'. This
    option is used when plotting permanent labels with Button 2.


NOTE that we carefully updated the docs (gnuplot.doc), so if you're
in doubt, you should always be able to do `help <keyword>`.


WHERE TO GET IT:

  The file gnuplot-38b-Jan-22-2000.tar.gz can be found at

  http://www.zellner.org/gnuplot/
  http://krispc6.physik.uni-karlsruhe.de/gnuplot/
  http://www.sci.muni.cz/~mikulik/gnuplot.html


There's also a cvs repository which can be accessed by
anonymous cvs (read-only) at

  :pserver:anonymous@krispc6.physik.uni-karlsruhe.de:/cvs/pub

To access the code via anonymous cvs you would

tcsh:
  setenv CVSROOT :pserver:anonymous@krispc6.physik.uni-karlsruhe.de:/cvs/pub

bash:
  export CVSROOT=:pserver:anonymous@krispc6.physik.uni-karlsruhe.de:/cvs/pub

and then
  cvs login
  (hit just return for the password prompt, there's no password).
  cvs -z3 checkout gnuplot
and later possibly
  cvs -z3 update

There's also a cvsweb interface to the repository at
  http://krispc6.physik.uni-karlsruhe.de/gnuplot/cvsweb



COMPILING:

Unix:
  The mouse must be enabled at compile time:
  ./configure --enable-mouse [other configure options] ...
  make
  make install

OS/2:
  Mouse support is compiled in if MOUSE=1 is present in makefile.os2
  (the default).


TECHNICAL DETAILS:

  On OS/2, the communication between gnupmdrv and gnuplot is implemented by
  shared memory and an event semaphore.  On Unix, we decided to use a
  bidirectional pipe for the ipc communication.  The readline interfaces were
  modified to listen to both stdin and the ipc file descriptor.  (Well, that's
  just the usual way).  Note that if compiling with gnu readline, you must
  have a gnu readline version > 2.2 (3.0).  This will not be a major drawback,
  as 2.2 is out for years now and the current gnu readline version is 4.0.
  The communication code is located in gpexecute.inc.

  For splots (3d) the data is cached and can therefore be redrawn
  very quickly.  This enables smooth rotating and zooming of splots.

  The X11 part is kept as *simple* as possible -- using the
  default font and color, no fancy toolkit widgets ...



OUTLOOK (TODO):

 - implement a binary protocol for X11 (note: protocol of PM is binary). This 
   is supposed to speed up things considerably, especially for large 3d plots.


Comments are welcome!

Petr Mikulik <mikulik@physics.muni.cz>
Pieter-Tjerk de Boer <ptdeboer@cs.utwente.nl>
Johannes Zellner <johannes@zellner.org>

January 22, 2000
