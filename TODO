[========================================================================]
[========= List of things to be done.  Plans, ideas, whatever... ========]
[========================================================================]

COMMANDS:
=========


DOCUMENTATION:
==============

 -- Improve the documentation on fonts
 -- More figures in the manual
 -- We no longer have a working build path for HTML documentation.
    Is there a suitable replacement?
 -- The LaTeX tutorial is so out of date that it is useless.
    Update or replace.

PLATFORMS:
==========

 -- We've seen a proof-of-principle build of gnuplot into javascript
    running in a browser.  If the tool chain is simple enough, we could
    make this a build target for autoconf/make.

GNUPLOT TOOLS LIBRARY:
======================

Make a library (e.g. usr/local/gnuplot/scripts/, .../gnuplot/bin) of 
(a) gnuplot scripts, and (b) shell scripts relevant for gnuplot:

-- enclose script "gpsavediff" that diff's output of gnuplot's "save" command 
and default setup after "reset" 

INSTALLATION --- LINUX:
=======================

-- the installation paths for TeX-related files are a mess


[========================================================================]
[========================================================================]
[========================================================================]

Note: use
	www.sourceforge.net/projects/gnuplot
=> "Feature request" for feature requests.


Lars' list from way back when
=============================

- provide library of replacement functions instead of stdfn.c
- completely rewrite the parser. Use yacc/bison if possible.
- maybe rewrite the scanner in lex? The benefits are not so obvious,
  because the current scanner is extremely simple. This is probably
  only worthwhile if the parser is rewritten at the same time.
- maybe use PD hash code for table-lookup (SNIPPETS code). Tables for
  builtin and user functions, variables, commands. What else? aliases
- standardise float/double comparisons around the suggestion in the
  comp.lang.c FAQ (What's a good way to check for "close enough"
  floating-point equality?) and symbolic constants from standard header files.
  LOADS of errors throughout the code, especially in graphics.c
- autogenerate term.h from config file in text format and/or configure?
- add more maintainer checks (eg. file permissions)
- better documentation format; get rid of the doc2xxx utils
  [SGML. SGML. SGML]
- tilde and variable expansion to be done by a shared routine gp_fopen()

HBB:
===

[Optional:] See if 16-bit compilations can be made to work again.


Ethan's list of ideas for development series 5.5
================================================

Code cleanup
------------
- refactor VMS conditionals so that all the code is in vms.c
- matrix data should be stored as (double) not (float)
- audit all FIXMEs, some must be out of date

Build system options
--------------------
- OSX autoconf
- all-qt or all-cairo build targets
- emscriptem build target

Terminals
---------
- canvas terminal overhaul (use browser's font support)
- possible updates for
  dxy aquaterm 
- outboard driver for wxt
- libgd routines are used for core operations such as
  "binary filetype=xxx" and pixmap.  Can these alternatively use cairo
  or libpng instead, removing a dependence on libgd?
  Direct use of libpng would allow input of 16bit or 32bit png data
  without loss of precision (cairo and libgd only keep 8 bits on input).
- webp animation (including yuv color space for better compression)

Fitting
-------
- Patch #655 (Bastian Maerkisch) additional fit algorithms
- Handle complex-valued functions

Math
----
- improved support for special functions.
  Better precision, extension to complex values wherever possible,
  document algorithms used with citations and expected precision.
- specfun.c has many lines of initializing constants for floating
  point math on platforms that are no longer supported. Delete them?
- consistent handling of NaN, +Inf, -Inf, and underflow.
- Savitzky-Golay filtering

