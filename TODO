Projects, in no particular order:

- revise border command to use keywords
- put minor tics into demo file
- allow load '-' or  gnuplot -  to mean interactive

- define either quit or exit to mean finish-this-file, not finish session
  - at present, they are ignored in script files

longer term

- break it into four layers:
  : low lever graphics  (some of term.c)
  : plotting code, reading the setshow.h global variables
  : parsing code - read a string, and parse and execute it
  : front end, interact with terminal / gui
  basically, gplotlib is layer 2, and the traditional gnuplot is
  layer 4, which is little more than a small client of layer 3.
  Terminal option lines are table driven,
  so that even though the options are defined by layer 1, the
  actual parsing is implemented in level 3

- group related 'set' variables into structures, particularly xaxis
  stuff,etc. This will allow a move to table-driven parsing.

Lars' list

- completely rewrite the parser. Use yacc/bison if possible.
- maybe rewrite the scanner in lex? The benefits are not so obvious,
  because the current scanner is extremely simple. This is probably
  only worthwhile if the parser is rewritten too.
- rewrite term.c to provide an interface to GNU plotutils
- [HBB] rewrite hidden3d code
- for post-3.7 release: integrate new feature patches (M. Koga's
  polygon patch, various postscript driver patches by Dick, T. Walter's
  gnuplot command line history save file, etc)?
- standardise float/double comparisons around the suggestion in the
  comp.lang.c FAQ (What's a good way to check for "close enough"
  floating-point equality?) and symbolic vars from standard header files.
- autogenerate term.h from config file in text format and/or configure
- add load path for files/GNUPLOT_LIBRARY env var
- provide library of replacement functions instead of stdfn.c
- [Lucas] fix axis ranges, overwritten labels in demos

