[========================================================================]
[========= List of things to be done.  Plans, ideas, whatever... ========]
[========================================================================]

COMMANDS:
=========


DOCUMENTATION:
==============

 -- Improve the documentation on fonts
 -- More figures in the manual
 -- We no longer have a working build path for HTML documentation.
    Is there a suitable replacement?

PLATFORMS:
==========

 -- We've seen a proof-of-principle build of gnuplot into javascript
    running in a browser.  If the tool chain is simple enough, we could
    make this a build target for autoconf/make.

GNUPLOT TOOLS LIBRARY:
======================

Make a library (e.g. usr/local/gnuplot/scripts/, .../gnuplot/bin) of 
(a) gnuplot scripts, and (b) shell scripts relevant for gnuplot:

-- enclose script "gpsavediff" that diff's output of gnuplot's "save" command 
and default setup after "reset" 

INSTALLATION --- LINUX:
=======================

-- the installation paths for TeX-related files are a mess


[========================================================================]
[========================================================================]
[========================================================================]

Note: use
	www.sourceforge.net/projects/gnuplot
=> "Feature request" for feature requests.


Lars' list
==========

- provide library of replacement functions instead of stdfn.c
- completely rewrite the parser. Use yacc/bison if possible.
- maybe rewrite the scanner in lex? The benefits are not so obvious,
  because the current scanner is extremely simple. This is probably
  only worthwhile if the parser is rewritten at the same time.
- maybe use PD hash code for table-lookup (SNIPPETS code). Tables for
  builtin and user functions, variables, commands. What else? aliases
- standardise float/double comparisons around the suggestion in the
  comp.lang.c FAQ (What's a good way to check for "close enough"
  floating-point equality?) and symbolic constants from standard header files.
  LOADS of errors throughout the code, especially in graphics.c
- autogenerate term.h from config file in text format and/or configure?
- add more maintainer checks (eg. file permissions)
- better documentation format; get rid of the doc2xxx utils
  [SGML. SGML. SGML]
- tilde and variable expansion to be done by 
  gp_fopen() - to be implemented

HBB:
===

[Optional:] See if 16-bit compilations can be made to work again.


Ethan's list of ideas for development series 5.3
================================================

Code cleanup
------------
- remove all the original axis_log/delog macros
- other obsolete macros?  HUGE? GPFAR?  MSDOS remnants?
- refactor VMS conditionals so that all the code is in vms.c
- use libm Bessel functions j0, j1, y0, y1, jn, yn if present
  rather than the hard-coded ones in standard.c
  NB: the ones in standard.c claim accuracy to 1e-13
      the libm man page for j0 claims accuracy to 2e-16
- Other libm functions?
- matrix data should be stored as (double) not (float)
- audit all FIXMEs, some must be out of date
- further optimization of STORE_WITH_LOG_AND_UPDATE_RANGE
  to increase speed and reduce code size

Build system options
--------------------
- OSX autoconf
- all-qt or all-cairo build targets
- emscriptem build target

Terminals
---------
- canvas terminal overhaul (use browser's font support)
- gnuplot enhanced text --> LeTeX conversion
- possible updates for
  dxy aquaterm 

Fitting
-------
- Patch #655 (Bastian Maerkisch) additional fit algorithms

Ideas for core extensions
-------------------------
- 64-bit integer arithmetic
- isosurfaces (3D contour of 4D data)
