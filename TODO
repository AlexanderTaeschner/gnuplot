[========================================================================]
[========= List of things to be done.  Plans, ideas, whatever... ========]
[========================================================================]

COMMANDS:
=========

 -- record/playback of multiplot command sequence

DOCUMENTATION:
==============

 -- Improve the documentation on fonts
 -- More figures in the manual

PLATFORMS:
==========

 -- We've seen a proof-of-principle build of gnuplot into javascript
    running in a browser.  If the tool chain is simple enough, we could
    make this a build target for autoconf/make.
 -- Is the VMS code still usable?
    Last successful build *reported to us* Dec 2013
    https://vmssoftware.com distributes a 2017 build of 5.0.2

GNUPLOT TOOLS LIBRARY:
======================

Make a library (e.g. usr/local/gnuplot/scripts/, .../gnuplot/bin) of 
(a) gnuplot scripts, and (b) shell scripts relevant for gnuplot:

-- enclose script "gpsavediff" that diff's output of gnuplot's "save" command 
and default setup after "reset" 

INSTALLATION --- LINUX:
=======================

-- the installation paths for TeX-related files are a mess


[========================================================================]
[========================================================================]
[========================================================================]

Note: use
	www.sourceforge.net/projects/gnuplot
=> "Feature request" for feature requests.


Lars' list from way back when
=============================

- provide library of replacement functions instead of stdfn.c
- completely rewrite the parser. Use yacc/bison if possible.
- maybe rewrite the scanner in lex? The benefits are not so obvious,
  because the current scanner is extremely simple. This is probably
  only worthwhile if the parser is rewritten at the same time.
- maybe use PD hash code for table-lookup (SNIPPETS code). Tables for
  builtin and user functions, variables, commands. What else? aliases
- standardise float/double comparisons around the suggestion in the
  comp.lang.c FAQ (What's a good way to check for "close enough"
  floating-point equality?) and symbolic constants from standard header files.
  LOADS of errors throughout the code, especially in graphics.c
- autogenerate term.h from config file in text format and/or configure?
- add more maintainer checks (eg. file permissions)
- better documentation format; get rid of the doc2xxx utils
  [SGML. SGML. SGML]

HBB:
===

[Optional:] See if 16-bit compilations can be made to work again.


Ethan's list of ideas for development series 6
==============================================

Code cleanup
------------
- Refactor VMS conditionals so that all the code is in vms.c
  Drop VMS altogether?
- Matrix data should be stored as (double) not (float)
- Audit all FIXMEs, some must be out of date
- Remove non-IEEE math constants?
  We no longer claim to support the architectures these conform to.

Build system options
--------------------
- OSX autoconf
- all-qt or all-cairo build targets
- emscriptem build target

Terminals
---------
- canvas terminal overhaul (use browser's font support)
- possible updates for
  dxy aquaterm 
- outboard driver for wxt
- libgd routines are used for core operations such as
  "binary filetype=xxx" and pixmap.  Can these alternatively use cairo
  or libpng instead, removing a dependence on libgd?
  Direct use of libpng would allow input of 16bit or 32bit png data
  without loss of precision (cairo and libgd only keep 8 bits on input).
- webp animation (including yuv color space for better compression)

Fitting
-------
- Patch #655 (Bastian Maerkisch) additional fit algorithms
- Handle complex-valued functions

Math
----
- improved support for special functions.
  Better precision, extension to complex values wherever possible,
  document algorithms used with citations and expected precision.
- consistent handling of NaN, +Inf, -Inf, and underflow.

Features
--------
- Rework image input code so that image data can be processed as data
  e.g. extract/modify individual channels from ARGB
       accept 16-bit PNG
- "record" function to save commands to a file separate from the history.
  motivation:  recurring requests to allow replot of multiplots
	set record "filename" {append}
	...
	unset record
	load "filename"
- "remultiplot" could automate the above idea
	'set multiplot' places a flag in the history
	'unset multiplot' places a terminating flag
	'remultiplot' replays history between the two flags
- FIR filters
   Add a new class of smoothing operations that would allow user-provided
   Savitzkyâ€“Golay filters. Smoothed value at point x[i] would be calculated
   as     i+n/2
      Sum        Weight[j] * y[j]
        j=i-n/2

