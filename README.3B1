
				   GNUPLOT
			Additional notes for users of
			   AT&T Unix PC 7300/3b1
				     by
				Augustine Cano


	INTRODUCTION

	The following notes address peculiarities, problems, possible
	improvements and instructions specific the the Unix PC version
	of GNUPLOT.  The port to the Unix PC was done by John Campbell
	(CAMPBELL@NAUVAX.bitnet), who also integrated the help system,
	added polar coordinates and fixed miscellaneous bugs.  I 
	(Augustine Cano, canoaf@dept.csci.unt.edu) made the makefiles
	easier to use and was a beta tester.

	The "README" file in this directory contains important information
	about the different makefiles and how to rename them to "make"
	GNUPLOT on the various systems supported.  Reading that file
	and at least the following INSTALLATION section will make it
	much easier to configure and install GNUPLOT.


	INSTALLATION

	The much friendlier makefile.3b1 makes it very easy to install
	this package.  All that is needed is to "make all" and "make
	install".  As usual, look over the makefile to make sure that
	the default destinations do not conflict with anything on your
	system.

	The distribution consists essentially of three parts: gnuplot
	itself, the help program and the documentation (which is used to
	build the help tree used by the help program).  If you want to 
	look over the details of the sub-systems, look at the makefiles 
	in ./help and ./docs respectively; otherwise, the top-level 
	makefile will take care of compiling and installing everything.  
	It is important that the directory /usr/local/help exist,
	otherwise the creation of the help tree will fail.
	The default destinations are as follows:

		gnuplot		- /usr/local/bin
		manual page	- /usr/man/man1
		help system	- /usr/local/help
		help tree root	- /usr/local/help/gnuplot

	Note that this is only relevant to "make install".  If you want to
	test the system in your current directory, before final installation,
	you can "make all" and then go to ./docs and create the help tree
	there.  You will then have to define the following environment
	variables so that gnuplot knows about the non-standard locations:

		GNUHELP='./help/help gnuplot'
		HELPDIR='./docs'

	An easy way of testing GNUPLOT is to "load" the .dem files.
	Typing help at the "gnuplot>" prompt will enter the help system.
	Step by step instructions are given there.  <RETURN> goes to the
	previous level and <CTRL D> returns you to GNUPLOT from any level.
	Two consecutive <RETURN>s at the top level of the help tree will
	also return to the "gnuplot>" prompt.

	Given that the help system does not have its own Unix-PC specific
	makefile, if you want to compile it with the shared library, you will
	have to uncomment the appropriate 'ld' line in help system Makefile.


	PROBLEMS, UNIX PC PECULIARITIES, IMPROVEMENTS

	In an attempt to get the program out as soon as possible, it was
	decided that certain minor problems, incompatibilities with other
	programs and improvements would be dealt with later.  If you have
	suggestions, fixes or improvements, send them to John Campbell
	(jdc@naucse.uucp).

	The primary area of conflict is the larger than 24 lines display
	of the Unix PC.  Ideally, as much of it should be used in a way
	that would not make this version radically different from that of
	other machines.

	One problem was caused by contention between GNUPLOT and sysinfo,
	the program written by Lenny Tropiano (lenny@icus.islp.ny.us).  This
	program updates the two bottom lines of the screen (the same ones
	used by the UA to display the soft key labels) every 15 seconds with
	miscellaneous system information.  GNUPLOT uses these two lines
	to display range information, and it would be invariably overwritten
	in less than 15 seconds.  John created a patch for sysinfo available 
	for FTP access from dept.csci.unt.edu (IP number 129.120.1.2).  The 
	file is called sysinfo.patch.  It prevents sysinfo from updating the 
	two bottom lines if they are being used by another program  (this works
	with the UA too.)

	In order to have the largest graphics window possible, GNUPLOT uses
	the uppermost status line, where the date, time, and various icons
	reside.  When switching to another window, the date, time and icons
	are not restored and they should be.

	The "gnuplot>" prompt appears inside the graphics window.  Any input
	makes this window scroll upwards.  It would be much more elegant to
	to use the line immediately below the graphics screen for input.
	One possible solution, that would solve this and also free the two
	bottom lines for sysinfo and the UA, would configure the 4 bottom
	lines of the screen like this:

|                     bottom of the graphics screen                           |
_______________________________________________________________________________
gnuplot > < this area for input        > < first line of range info > |working|
< this area for error messages         > < second line of range info> | icon  |
<              this line used by sysinfo and for soft key labeling            >
<              this line used by sysinfo and for soft key labeling            >
_______________________________________________________________________________

	One problem is that the input area is not very big.  A solution
	(other than overwriting the first line of the range info) would be
	to use the scheme that ksh uses to edit the command line (if you
	get to column 80, a '<' appears there and your command gets shifted
	to the left.) This way, you could use vi for command line editing.
	Neat, but it could be more trouble than it's worth, and you would
	not see long formulas all at once.  Alternatively, the range info
	could be left where it is and the input area and error messages
	line extended up to the "working" icon, or the "working" icon
	suppressed until the line is no longer needed (is this possible
	without hacking the kernel?)

	Yet another option would be to have a text window pop up when input
	is required or help text needs to be output.  The range information
	would stay where it currently is.  This solution would, of course,
	use real tam windows and thus allow switching from one window to 
	another if gnuplot were in "text" mode.

	Ideally, when gnuplot exits, it should leave the two bottom lines
	alone (not clearing them) if what is in them was not written by it.

	Finally, and this is a matter of preference, some people might want
	gnuplot to clear the screen (the graphics window) or restore the
	previous contents when exiting.
