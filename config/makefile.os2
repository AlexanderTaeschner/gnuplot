#
# $Id: makefile.os2,v 1.36 2002/10/05 15:08:43 mikulik Exp $
#
# GNUPLOT Makefile for use on OS/2 2.x (and above)
# using emx 0.9 (and above) and GNUMake
#
# To compile gnuplot, run the following command in directory gnuplot\src:
#	make -f ..\config\makefile.os2
#

# We depend on using cmd.exe (or a compatible one) and the
# standard OS/2 tool set. (additionally we use 'cat')
SHELL=cmd.exe

#
# ***************** Begin of Configuration section ***************************
#

#
# Comment out the definition lines to disable the according features:
#

# X11 driver
# requires installed XFree86
X11=1

# GIF, PNG, JPEG device drivers
# Requires gd library. There are two possibilities how to configure these
# drivers for use in gnuplot, depending on the gd version. See README.1ST for
# more details. 
#
# 1. You can use the following set of options for GD library v1.8 or newer. 
# This library writes PNG and JPEG images, but not GIF. Therefore the option
# PNG_FOR_GIF allows backwards compatibility with the old GIF driver, i.e.
# 'set term gif ...' is still valid, but it actually writes out PNG files
# instead of GIF.
# If libgd has been compiled with TrueType font support, then you can use
# scaled TrueType fonts in png images. If not, then uncomment FREETYPE.
# Requires GD, PNG and Z libraries, optionally libfreetype.
#
NEWGD=1
PNG_FOR_GIF=1
#JPEG=1
FREETYPE=1
#
# 2. You can use the following set of options for the old GD library
# (v1.2 - v1.4), which supports GIF images only.
# In this case the PNG driver is independent on GD driver, but there are
# several functionality limitations of the old non-libgd png driver.
# Required libraries: GD (GIF driver), PNG and Z (PNG driver).
#
#GD=1
#GIF=1
#PNG=1

# PDF device driver
# requires PDFlib (not part of gnuplot)
# PDF=1

# VESAkit support
# requires SVGA- and VESA Kit (not part of gnuplot)
# VESA=1

# GNU_ReadLine support
# requires GNU readline library (static or DLL; not part of gnuplot)
# GNU_RL=1

# DEBUGging support
# creates binaries suitable for debugging. Some bugs may come and go
# as opposed to a production build since we lower the optimization level
# DEBUG=1

# MOUSE support for PM and X11 terminals
MOUSE=1

# PM3D splot mode + colours and filled polygons
PM3D=1

#
# ****************** End of Configuration section ****************************
#

#
# Miscellaneous setup
#

.PHONY: all runtime alldocs demo binaries infomin clean veryclean
.SUFFIXES: .c .trm .o .obj .exe .rc .res .dll

# A reasonable default
default: runtime

# A basic help screen
help:
	   @echo " Usage: $(MAKE) -f makefile.os2 target"
	   @echo "   where target is one of:"
	   @echo "   all runtime alldocs demo binaries infomin help clean veryclean"

#
# Definitions of flags and symbols used by makefile.all and makefile.os2
#

# these definitions are used by makefile.all
T=../term/
D=../docs/
L=$(D)latextut/
M=../demo/

#
# Definitions valid for all targets on OS/2
#

OS2DIR  = os2
DOCDIR  = ..\docs
DEMODIR = ..\demo
TERMDIR = ..\term


# where to place gnuplot.gih helpfile
HELPFILE = $(DOCDIR)\gnuplot.gih

#
# 3 sets of variables are defined and used to create
#  (1): gnuplot.exe, and utilities
#   2 : gnupmdrv.exe (the PM-driver executable)
#
CC  = gcc
CC2 = gcc
O  = o
O2 = obj

# Flags for compiler and linker under OS/2
OS2FLAGS = -DOS2

# Flags for compiling with EMX/GCC
# Special note: -ffloat-store is necessary to avoid some
# strange behaviour: 
# confirmed for gcc 2.7.x/2.8.x; graphics.c used to be the culprit, 
# but as of today (20010918) it isn't any more ...
EMXSPECIFIC = -DHAVE_CONFIG_H -ffloat-store

LIBS = 
ifdef GNU_RL
  EMXSPECIFIC += -DHAVE_LIBREADLINE
  LIBS        += -lreadline -ltermcap
endif

#
# Choose flags suitable for a debugging or for a production build
#
ifdef DEBUG
CFLAGS  = -g $(OS2FLAGS) $(EMXSPECIFIC) -Wall -Wno-comment -O0 -Zmt
LDFLAGS  = -g -Zmt -Zcrtdll -Zbsd-signals
CFLAGS2 = -g $(OS2FLAGS) $(EMXSPECIFIC) -Wall              -O0 -Zmt -Zomf
LDFLAGS2 = -g -Zmt -Zcrtdll -Zbsd-signals -Zomf
else
CFLAGS  = $(OS2FLAGS) $(EMXSPECIFIC) -O4 -mpentium -Wall -Wno-unused -Wno-comment -Zmt
LDFLAGS  = -s -Zmt -Zcrtdll -Zbsd-signals
CFLAGS2 = $(OS2FLAGS) $(EMXSPECIFIC) -O4 -mpentium -Wall -Wno-unused              -Zmt -Zomf
LDFLAGS2 = -s -Zmt -Zcrtdll -Zbsd-signals -Zomf
endif

#
# Settings for the terminals to be included
#
TERMFLAGS = -I. -I.. -I$(T)

ifdef NEWGD
  GD=1
  PNG=1
endif

ifdef GD
  CFLAGS += -DHAVE_LIBGD
  TERMLIBS += -lgd
endif

ifdef GIF
  CFLAGS += -DHAVE_GD_GIF
endif

ifdef PNG
  CFLAGS += -DHAVE_PNG
  TERMLIBS += -lpng -lz
endif

ifdef NEWGD
ifdef FREETYPE
  CFLAGS += -DHAVE_TTF
  TERMLIBS += -lfreetype
endif
ifdef JPEG
  CFLAGS += -DHAVE_GD_JPEG
  TERMLIBS += -ljpeg
endif
ifdef PNG_FOR_GIF
  CFLAGS += -DPNG_FOR_GIF
  CFLAGS += -DHAVE_GD_GIF
endif
endif

ifdef PDF
  TERMFLAGS += -DHAVE_LIBPDF
  # amai: don't ask me... My libpdf requires all those additional libs
  TERMLIBS += -lpdf -ltiff -ljpeg
ifndef PNG
  TERMLIBS += -lz
endif
endif

# SVGA-/VESAkit support
ifdef VESA
  TERMFLAGS += -DEMXVESA
  TERMLIBS  += -ljmgraph -lvesa
endif

# X11 support
ifdef X11
  TERMFLAGS += -DX11 -DX11_DRIVER_DIR=\".\"
endif

# MOUSE support
ifdef MOUSE
  TERMFLAGS += -DUSE_MOUSE
  # the interprocess communication flag OS2_IPC is #defined in config.(os2,h)
endif

# PM3D support
ifdef PM3D
  CFLAGS  += -DPM3D
  CFLAGS2 += -DPM3D
endif

# TOOLS
CPP = cpp
# Do not name this variable "IPFC"!! This won't work out...
IPF_C = ipfc.exe

# Tools for buildings the docs
DVIPS    = dvips
LATEX    = latex
PDFLATEX = vlatex
PLAINTEX = tex

#
# Default Rules
#
.c.$(O):
	$(CC)  $(CFLAGS) $(TERMFLAGS) -o $*.$(O) -c $*.c
.c.obj:
	$(CC2) $(CFLAGS2) $(TERMFLAGS) -o $*.obj -c $*.c

#
# Include dependencies valid for all platforms from makefile.all
#
include makefile.all


#
# Pre-defined sets of targets:
#
all:         runtime demo
alldocs:     $(DOCDIR)\gnuplot.gih $(DOCDIR)\gnuplot.inf $(DOCDIR)\gnuplot.html \
             $(DOCDIR)\gnuplot.info $(DOCDIR)\gnuplot.ps \
             $(DOCDIR)\gnuplot.pdf
runtime:     config.h binaries infomin $(DOCDIR)\gnuplot.inf
infomin:     gnupmdrv.hlp $(DOCDIR)\gnuplot.gih
demo:        $(M)binary1 $(M)binary2 $(M)binary3
ifdef X11
binaries: gnuplot.exe gnupmdrv.exe gnuplot_x11.exe
else
binaries: gnuplot.exe gnupmdrv.exe
endif

OBJS = $(COREOBJS) version.$(O)

$(OBJS): config.h

term.$(O): $(CORETERM) term.h

gnuplot.exe: $(OBJS)
	$(CC) $(LDFLAGS) -o $@ $(OBJS) $(TERMLIBS) $(LIBS)

#
# Build the PM outboard driver
#
$(OS2DIR)\gnupmdrv.$(O2):  $(OS2DIR)\gnupmdrv.c   $(OS2DIR)\gnupmdrv.h
$(OS2DIR)\gclient.$(O2):   $(OS2DIR)\gclient.c    $(OS2DIR)\gnupmdrv.h  mouse.h
$(OS2DIR)\dialogs.$(O2):   $(OS2DIR)\dialogs.c    $(OS2DIR)\gnupmdrv.h  $(OS2DIR)\dialogs.h
$(OS2DIR)\print.$(O2):     $(OS2DIR)\print.c      $(OS2DIR)\gnupmdrv.h
$(OS2DIR)\gpexecute.$(O2): gpexecute.c            gpexecute.h
$(OS2DIR)\gnupmdrv.res :   $(OS2DIR)\gnupmdrv.rc  $(OS2DIR)\gnuplot.ico $(OS2DIR)\dialogs.h
	cd $(OS2DIR) && rc -r gnupmdrv.rc & cd ..

OS2OBJ = $(OS2DIR)\gnupmdrv.$(O2) $(OS2DIR)\gclient.$(O2) $(OS2DIR)\print.$(O2) \
         $(OS2DIR)\dialogs.$(O2) gpexecute.$(O2)

gnupmdrv.exe: $(OS2OBJ) $(OS2DIR)\gnupmdrv.res $(OS2DIR)\gnupmdrv.def
	$(CC2) $(LDFLAGS2) -o $@ $(OS2OBJ) $(OS2DIR)\gnupmdrv.res $(OS2DIR)\gnupmdrv.def

gnupmdrv.hlp: $(OS2DIR)\gnupmdrv.ipf
	$(IPF_C) $< $@

#
# Build the X11 outboard driver
#

# X11 libraries
X11LIBS = -lX11 -lsocket -Zbsd-signals -Zcrtdll
# X11 includes
X11INCLUDES = -I$(X11ROOT)/XFree86/include
X11FLAGS= -Zmt
ifdef MOUSE
X11FLAGS += -DUSE_MOUSE
endif

gnuplot_x11.exe: gplt_x11.o gpexecute.o getcolor_x11.o
	$(CC) $(LDFLAGS) $(X11FLAGS) $(EMXSPECIFIC) -o $@ -DGPLT_X11_MODE $^ $(X11LIBS)

gplt_x11.o: gplt_x11.c mouse.h gpexecute.h config.h
	$(CC) $(CFLAGS) $(X11FLAGS) $(EMXSPECIFIC) $(X11INCLUDES) -c -o $@ $<

getcolor_x11.o: getcolor.c
	$(CC) $(CFLAGS) $(X11FLAGS) $(EMXSPECIFIC) -DGPLT_X11_MODE -c -o $@ $<

#
# Create config.h
# This file is preferable over having explicit gcc command longer than 10 lines:
# gcc ... -DHAVE_ -DHAVE_ ... -DHAVE_ -DHAVE_ ... myfile.c
#
config.h: ..\config\config.os2
	IF EXIST $@ DEL $@
	copy $< $@

#
# Create documentation in various formats
#
# The idea behind the renaming business is that we may want to
# use various LaTeX systems which may choke if they find existing
# intermediate files from other systems.
# Call LaTeX three times to get the toc right.
$(DOCDIR)\gnuplot.dvi: $(DOCDIR)\gnuplot.tex
	copy $(DOCDIR)\gnuplot.tex $(DOCDIR)\gnuplot_2.tex
	cd $(DOCDIR) && $(LATEX) gnuplot_2.tex && $(LATEX) gnuplot_2.tex && $(LATEX) gnuplot_2.tex
	if exist $(DOCDIR)\gnuplot.dvi del $(DOCDIR)\gnuplot.dvi
	move $(DOCDIR)\gnuplot_2.dvi $(DOCDIR)\gnuplot.dvi
	del $(DOCDIR)\gnuplot_2.*
$(DOCDIR)\gnuplot.ps: $(DOCDIR)\gnuplot.dvi
	$(DVIPS) -o $@ $(DOCDIR)\gnuplot.dvi
$(DOCDIR)\gnuplot.pdf: $(DOCDIR)\gnuplot.tex
	copy $(DOCDIR)\gnuplot.tex $(DOCDIR)\gnuplot_3.tex
	cd $(DOCDIR) && $(PDFLATEX) gnuplot_3.tex && $(PDFLATEX) gnuplot_3.tex && $(PDFLATEX) gnuplot_3.tex
	if exist $(DOCDIR)\gnuplot.pdf del $(DOCDIR)\gnuplot.pdf
	move $(DOCDIR)\gnuplot_3.pdf $(DOCDIR)\gnuplot.pdf
	del $(DOCDIR)\gnuplot_3.*
$(DOCDIR)\gnuplot.tex:  $(DOCDIR)\gnuplot.doc $(DOCDIR)\doc2tex.exe
	$(DOCDIR)\doc2tex.exe $(DOCDIR)\gnuplot.doc $@
$(DOCDIR)\gnuplot.inf:  $(DOCDIR)\gnuplot.ipf
	$(IPF_C) /INF $< $@
$(DOCDIR)\gnuplot.gih:  $(DOCDIR)\gnuplot.doc $(DOCDIR)\doc2gih.exe
	$(DOCDIR)\doc2gih.exe $(DOCDIR)\gnuplot.doc $@
$(DOCDIR)\gnuplot.html: $(DOCDIR)\gnuplot.texi $(DOCDIR)\gnuplot.doc
	$(MAKEINFO) --html -I$(DOCDIR) $(DOCDIR)\gnuplot.texi --no-split --output=$@
$(DOCDIR)\gnuplot.info: $(DOCDIR)\gnuplot.texi $@
	$(MAKEINFO) -I$(DOCDIR) $(DOCDIR)\gnuplot.texi --no-split --output=$@
# $(DOCDIR)\gnuplot.texi: $(DOCDIR)\gnuplot.doc $(DOCDIR)\doc2texi.pl
#	perl $(DOCDIR)\doc2texi.pl $(DOCDIR)\gnuplot.doc >$@
$(DOCDIR)\gnuplot.rtf:  $(DOCDIR)\gnuplot.doc $(DOCDIR)\doc2rtf.exe
	$(DOCDIR)\doc2rtf.exe $(DOCDIR)\gnuplot.doc $@
$(DOCDIR)\gnuplot.ms:   $(DOCDIR)\gnuplot.doc $(DOCDIR)\doc2ms.exe
	$(DOCDIR)\doc2ms.exe $(DOCDIR)\gnuplot.doc $@
$(DOCDIR)\gnuplot.ipf:  $(DOCDIR)\gnuplot.doc $(DOCDIR)\doc2ipf.exe
	$(DOCDIR)\doc2ipf.exe $(DOCDIR)\gnuplot.doc $@
# Assume we need A4 format
$(DOCDIR)\gpcard.ps: $(DOCDIR)\gpcard.dvi
	cd $(DOCDIR) && $(DVIPS) -o gpcard_letter.ps $< 
	cd $(DOCDIR) && psresize -pletter -Pa4 gpcard_letter.ps $@
$(DOCDIR)\gpcard.dvi: $(DOCDIR)\gpcard.tex
	cd $(DOCDIR) && $(PLAINTEX) gpcard.tex && $(PLAINTEX) gpcard.tex

#
# Tools for converting the documentation from docs\gnuplot.doc
# in various formats
#

# Some dependencies - no rule!
$(DOCDIR)\doc2gih.exe $(DOCDIR)\doc2ipf.exe $(DOCDIR)\doc2info.exe \
$(DOCDIR)\doc2tex.exe $(DOCDIR)\doc2rtf.exe: \
      $(DOCDIR)\termdoc.c $(DOCDIR)\xref.c $(DOCDIR)\allterm.h ..\src\config.h


$(DOCDIR)\allterm.h: $(CORETERM)
#   echo > $@
#	cd $(TERMDIR) && type *.trm > $@
	cd $(DOCDIR) && cat $(TERMDIR)/*.trm > allterm.c
	cd $(DOCDIR) && $(CPP) -I$(TERMDIR) -DTERM_DRIVER_H -DTERM_HELP allterm.c | \
      sed -e "/^ *$$/d;/^#/d" > allterm.h

$(DOCDIR)\doc2gih.exe:  $(DOCDIR)\doc2gih.c $(DOCDIR)\termdoc.c $(OS2TERM)
	$(CC) $(CFLAGS) $(TERMFLAGS) -DALL_TERM_DOC -o $@ $(DOCDIR)\doc2gih.c $(DOCDIR)\termdoc.c
$(DOCDIR)\doc2ipf.exe:  $(DOCDIR)\doc2ipf.c $(DOCDIR)\termdoc.c $(DOCDIR)\xref.c $(OS2TERM)
	$(CC) $(CFLAGS) $(TERMFLAGS) -DALL_TERM_DOC -o $@ $(DOCDIR)\doc2ipf.c $(DOCDIR)\termdoc.c $(DOCDIR)\xref.c
$(DOCDIR)\doc2tex.exe:  $(DOCDIR)\doc2tex.c $(DOCDIR)\termdoc.c $(OS2TERM) $(DOCDIR)\allterm.h
	$(CC) $(CFLAGS) $(TERMFLAGS) -DALL_TERM_DOC -o $@ $(DOCDIR)\doc2tex.c $(DOCDIR)\termdoc.c
$(DOCDIR)\doc2rtf.exe:  $(DOCDIR)\doc2rtf.c $(DOCDIR)\termdoc.c $(DOCDIR)\xref.c $(OS2TERM)
	$(CC) $(CFLAGS) $(TERMFLAGS) -DALL_TERM_DOC -o $@ $(DOCDIR)\doc2rtf.c $(DOCDIR)\termdoc.c $(DOCDIR)\xref.c
$(DOCDIR)\doc2ms.exe:   $(DOCDIR)\doc2ms.c $(DOCDIR)\termdoc.c $(OS2TERM)
	$(CC) $(CFLAGS) $(TERMFLAGS) -DALL_TERM_DOC -o $@ $(DOCDIR)\doc2ms.c $(DOCDIR)\termdoc.c
#
# Create binary demo files
#
$(M)binary1 $(M)binary2 $(M)binary3: $(M)bf_test.exe
	cd $(DEMODIR) && bf_test.exe

$(M)bf_test.exe : bf_test.c binary.$(O) alloc.$(O)
	$(CC) $(CFLAGS) -o $@ bf_test.c binary.$(O) alloc.$(O)

#
# Clean up
#

# Clean up all files temporary used
clean:
	IF EXIST config.h               DEL config.h
	IF EXIST *.$(O)                    DEL *.$(O)
	IF EXIST *.$(O2)                   DEL *.$(O2)
	cd $(OS2DIR) && IF EXIST *.$(O2)   DEL *.$(O2)
	IF EXIST $(OS2DIR)\gnupmdrv.res    DEL $(OS2DIR)\gnupmdrv.res
	IF EXIST $(DEMODIR)\bf_test.exe    DEL $(DEMODIR)\bf_test.exe
	IF EXIST $(DOCDIR)\doc2*.exe       DEL $(DOCDIR)\doc2*.exe
	IF EXIST $(DOCDIR)\gnuplot.ipf     DEL $(DOCDIR)\gnuplot.ipf
	IF EXIST $(DOCDIR)\gnuplot_2*      DEL $(DOCDIR)\gnuplot_2*
	IF EXIST $(DOCDIR)\gnuplot_3*      DEL $(DOCDIR)\gnuplot_3*
	IF EXIST core                      DEL core
	IF EXIST $(DOCDIR)\allterm.?       DEL $(DOCDIR)\allterm.?

# Clean up ALL files that were not part of the source distribution
veryclean: clean
	IF EXIST *.exe                     DEL *.exe         
	IF EXIST $(DOCDIR)\gnuplot.dvi     DEL $(DOCDIR)\gnuplot.dvi
	IF EXIST $(DOCDIR)\gnuplot.gih     DEL $(DOCDIR)\gnuplot.gih
	IF EXIST $(DOCDIR)\gnupmdrv.hlp    DEL $(DOCDIR)\gnupmdrv.hlp
	IF EXIST $(DOCDIR)\gnuplot.html    DEL $(DOCDIR)\gnuplot.html
	IF EXIST $(DOCDIR)\gnuplot.inf     DEL $(DOCDIR)\gnuplot.inf
	IF EXIST $(DOCDIR)\gnuplot.info    DEL $(DOCDIR)\gnuplot.info
	IF EXIST $(DOCDIR)\gnuplot.ms      DEL $(DOCDIR)\gnuplot.ms
	IF EXIST $(DOCDIR)\gnuplot.ps      DEL $(DOCDIR)\gnuplot.ps
	IF EXIST $(DOCDIR)\gnuplot.pdf     DEL $(DOCDIR)\gnuplot.pdf
	IF EXIST $(DOCDIR)\gnuplot.rtf     DEL $(DOCDIR)\gnuplot.rtf
	IF EXIST $(DOCDIR)\gnuplot.tex     DEL $(DOCDIR)\gnuplot.tex
	IF EXIST $(DOCDIR)\gpcard*.ps      DEL $(DOCDIR)\gpcard*.ps
	IF EXIST $(DOCDIR)\*.dvi           DEL $(DOCDIR)\*.dvi
	IF EXIST $(DOCDIR)\*.log           DEL $(DOCDIR)\*.log
	IF EXIST $(DOCDIR)\*.aux           DEL $(DOCDIR)\*.aux
	IF EXIST $(DOCDIR)\*.toc           DEL $(DOCDIR)\*.toc
	IF EXIST $(DEMODIR)\binary?        DEL $(DEMODIR)\binary?
