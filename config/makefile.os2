#
# $Id: makefile.os2,v 1.23 2001/12/01 13:08:59 amai Exp $
#
# GNUPLOT Makefile for use on OS/2 2.x and above
# using emx 0.9 (and above) and GNUMake
#
# last modification date: (see CVS Id)
#

# We depend on using cmd.exe (or a compatible one) and the
# standard OS/2 tools set.
SHELL=cmd.exe

#
# ***************** Begin of Configuration section ***************************
#

#
# Comment out the definition lines to disable the according features:
#

# X11 driver
# requires installed XFree86
# X11=1

# GD (GIF) device driver
# requires GD library (not part of gnuplot)
# GD=1

# PNG device driver
# requires PNG and Z libraries (not part of gnuplot)
# PNG=1

# PDF device driver
# requires PDFlib (not part of gnuplot)
# PDF=1

# VESAkit support
# requires SVGA- and VESA Kit (not part of gnuplot)
# VESA=1

# GNU_ReadLine support
# requires GNU readline library (static or DLL; not part of gnuplot)
# May fail in an xterm under XFree/2
# GNU_RL=1

# DEBUGging support
# creates binaries suitable for debugging. Some bugs may come and go
# as opposed to a production build since we lower the optimization level
# DEBUG=1

# MOUSE support for PM and X11 terminals
MOUSE=1

# PM3D splot mode + colours and filled polygons
PM3D=1

#
# ****************** End of Configuration section ****************************
#

#
# Miscellaneous setup
#

.PHONY: all runtime alldocs demo binaries infomin clean veryclean
.SUFFIXES: .c .trm .o .obj .exe .rc .res .dll

# A reasonable default
default: runtime

# a help screen
help:
	   @echo " Usage: $(MAKE) -f makefile.os2 target"
	   @echo "   target is one of:"
	   @echo "   all runtime alldocs demo binaries infomin help clean veryclean"

#
# Definitions of flags and symbols used by makefile.all and makefile.os2
#

# these definitions are used by makefile.all
T=../term/
D=../docs/
L=$(D)latextut/
M=../demo/

#
# Definitions valid for all targets on OS/2
#

OS2DIR  = os2
DOCDIR  = ..\docs
DEMODIR = ..\demo
TERMDIR = ..\term


# where to place gnuplot.gih helpfile
HELPFILE = $(DOCDIR)\gnuplot.gih

#
# 3 sets of variables are defined and used to create
#  (1): gnuplot.exe
#   2 : gnupmdrv.exe (the PM-driver executable)
#   3 : utilities like doc2*.exe, bf_test.exe, ...
#
CC  = gcc
CC2 = gcc
CC3 = gcc
O  = o
O2 = obj
O3 = o

# Flags for compiler and linker under OS/2
OS2FLAGS = -DOS2

# Flags for compiling with EMX/GCC
# Special note: -ffloat-store is necessary to avoid some
# strange behaviour: 
# confirmed for gcc 2.7.x/2.8.x; graphics.c used to be the culprit, 
# but as of today (20010918) it isn't any more ...
EMXSPECIFIC =  -ffloat-store \
   -DHAVE_ATEXIT -DHAVE_ERRNO_H -DHAVE_FLOAT_H -DHAVE_GETCWD -DHAVE_LIMITS_H \
   -DHAVE_LOCALE_H -DHAVE_MATH_H -DHAVE_MEMCPY -DHAVE_MEMMOVE -DHAVE_MEMSET \
   -DHAVE_SELECT -DHAVE_SETVBUF -DHAVE_SIGSETJMP -DHAVE_SLEEP -DHAVE_SNPRINTF \
   -DHAVE_STDLIB_H -DHAVE_STRCHR -DHAVE_STRCSPN -DHAVE_STRDUP -DHAVE_STRERROR \
   -DHAVE_STRING_H -DHAVE_STRNICMP -DHAVE_STRRCHR -DHAVE_STRSTR \
   -DHAVE_SYS_IOCTL_H -DHAVE_SYS_PARAM_H -DHAVE_SYS_SELECT_H \
   -DHAVE_SYS_SOCKET_H -DHAVE_SYS_STAT_H -DHAVE_SYS_TIME_H -DHAVE_SYS_TYPES_H \
   -DHAVE_TIME_H -DHAVE_UNISTD_H -DHAVE_VFPRINTF \
   -DHAVE_STRINGIZE \
   -DPIPES -DREADLINE

LIBS = 
ifdef GNU_RL
  EMXSPECIFIC += -DHAVE_LIBREADLINE
  LIBS        += -lreadline -ltermcap
endif

#
# Choose flags suitable for a debugging or for a production build
#
ifdef DEBUG
CFLAGS  = -g $(OS2FLAGS) $(EMXSPECIFIC) -Wall -Wno-comment -O0 -Zmt
LDFLAGS  = -g -Zmt -Zcrtdll -Zbsd-signals
CFLAGS2 = -g $(OS2FLAGS) $(EMXSPECIFIC) -Wall              -O0 -Zmt -Zomf
LDFLAGS2 = -g -Zmt -Zcrtdll -Zbsd-signals -Zomf
CFLAGS3 = -g $(OS2FLAGS) $(EMXSPECIFIC) -Wall -Wno-comment -O0 -I.
LDFLAGS3 = -g -Zmt -Zcrtdll -Zbsd-signals
else
CFLAGS  = $(OS2FLAGS) $(EMXSPECIFIC) -O4 -mpentium -Wall -Wno-unused -Wno-comment -Zmt
LDFLAGS  = -s -Zmt -Zcrtdll -Zbsd-signals
CFLAGS2 = $(OS2FLAGS) $(EMXSPECIFIC) -O4 -mpentium -Wall -Wno-unused              -Zmt -Zomf
LDFLAGS2 = -s -Zmt -Zcrtdll -Zbsd-signals -Zomf
CFLAGS3 = $(OS2FLAGS) $(EMXSPECIFIC) -O4 -mpentium -Wall -Wno-unused -Wno-comment -I.
LDFLAGS3 = -s -Zmt -Zcrtdll -Zbsd-signals
endif

#
# Settings for the terminals to be included
#
TERMFLAGS = -I.. -I$(T)

# All terminals available via #defines should be listed below
# Some terminals can be en/disabled in the configuration at the
# beginning of this Makefile.os2 but others may still require
# changes in term.h

#
# GIF-support
ifdef GD
TERMFLAGS += -DHAVE_LIBGD
TERMLIBS  += -lgd
endif
# PDF-support
ifdef PDF
TERMFLAGS += -DHAVE_LIBPDF
# amai: don't ask me... My libpdf demand all those additional libs
TERMLIBS  += -lpdf -ltiff -ljpeg -lz
endif
# PNG-support
ifdef PNG
TERMFLAGS += -DHAVE_LIBPNG
TERMLIBS  += -lpng -lz
endif
# SVGA-/VESAkit support
ifdef VESA
TERMFLAGS += -DEMXVESA
TERMLIBS  += -ljmgraph -lvesa
endif
# X11 support
ifdef X11
TERMFLAGS += -DX11
endif
# MOUSE support for PM terminal
ifdef MOUSE
TERMFLAGS += -DUSE_MOUSE
# currently, there is no choice in interprocess communication
CFLAGS += -DOS2_IPC=1
CFLAGS2 += -DOS2_IPC=1
endif
# PM3D support
ifdef PM3D
CFLAGS += -DPM3D
CFLAGS2 += -DPM3D
endif

# TOOLS
CPP = cpp
# Don't name this variable "IPFC"!!
IPF_C = ipfc.exe

# Tools for buildings the docs
DVIPS    = dvips
LATEX    = latex
PDFLATEX = vlatex
PLAINTEX = tex

#
# Default Rules
#
.c.$(O):
	$(CC)  $(CFLAGS) $(TERMFLAGS) -o $*.$(O) -c $*.c
.c.obj:
	$(CC2) $(CFLAGS2) -o $*.obj -c $*.c

#
# Include dependencies valid for all platforms from makefile.all
#
include makefile.all


#
# Pre-defined sets of targets:
#
all:         runtime demo
alldocs:     $(DOCDIR)\gnuplot.gih $(DOCDIR)\gnuplot.inf $(DOCDIR)\gnuplot.html \
             $(DOCDIR)\gnuplot.info $(DOCDIR)\gnuplot.ps \
             $(DOCDIR)\gnuplot.pdf
runtime:     binaries infomin $(DOCDIR)\gnuplot.inf
infomin:     gnupmdrv.hlp $(DOCDIR)\gnuplot.gih
demo:        $(M)binary1 $(M)binary2 $(M)binary3
ifdef X11
binaries: gnuplot.exe gnupmdrv.exe gnuplot_x11.exe
else
binaries: gnuplot.exe gnupmdrv.exe
endif

OBJS = $(COREOBJS) version.$(O)
term.$(O): $(CORETERM) term.h

gnuplot.exe: $(OBJS)
	$(CC) $(LDFLAGS) -o $@ $(OBJS) $(TERMLIBS) $(LIBS)

#
# Build the PM outboard driver
#
$(OS2DIR)\gnupmdrv.$(O2):  $(OS2DIR)\gnupmdrv.c   $(OS2DIR)\gnupmdrv.h
$(OS2DIR)\gclient.$(O2):   $(OS2DIR)\gclient.c    $(OS2DIR)\gnupmdrv.h  mouse.h
$(OS2DIR)\dialogs.$(O2):   $(OS2DIR)\dialogs.c    $(OS2DIR)\gnupmdrv.h  $(OS2DIR)\dialogs.h
$(OS2DIR)\print.$(O2):     $(OS2DIR)\print.c      $(OS2DIR)\gnupmdrv.h
$(OS2DIR)\gpexecute.$(O2): gpexecute.c            gpexecute.h
$(OS2DIR)\gnupmdrv.res :   $(OS2DIR)\gnupmdrv.rc  $(OS2DIR)\gnuplot.ico $(OS2DIR)\dialogs.h
	cd $(OS2DIR) && rc -r gnupmdrv.rc & cd ..

OS2OBJ = $(OS2DIR)\gnupmdrv.$(O2) $(OS2DIR)\gclient.$(O2) $(OS2DIR)\print.$(O2) \
         $(OS2DIR)\dialogs.$(O2) gpexecute.$(O2)

gnupmdrv.exe: $(OS2OBJ) $(OS2DIR)\gnupmdrv.res $(OS2DIR)\gnupmdrv.def
	$(CC2) $(LDFLAGS2) -o $@ $(OS2OBJ) $(OS2DIR)\gnupmdrv.res $(OS2DIR)\gnupmdrv.def

gnupmdrv.hlp: $(OS2DIR)\gnupmdrv.ipf
	$(IPF_C) $< $@

#
# Build the X11 outboard driver
#

# X11 libraries
X11LIBS = -lX11 -lsocket -Zbsd-signals -Zcrtdll
# X11 includes
X11INCLUDES = -I$(X11ROOT)/XFree86/include
X11FLAGS= -Zmt
ifdef MOUSE
X11FLAGS += -DUSE_MOUSE
endif

gnuplot_x11.exe: gplt_x11.o gpexecute.o getcolor.o
	$(CC) $(LDFLAGS) $(X11FLAGS) $(EMXSPECIFIC) -o $@ $^ $(X11LIBS)

gplt_x11.o: gplt_x11.c mouse.h gpexecute.h
	$(CC) $(CFLAGS) $(X11FLAGS) $(EMXSPECIFIC) $(X11INCLUDES) -c -o $@ $<

#
# Create documentation in various formats
#
# Don't care about the strange way it's implemented ...
# Call LaTeX three times to get the toc right.
$(DOCDIR)\gnuplot.dvi: $(DOCDIR)\gnuplot.tex
	copy $(DOCDIR)\gnuplot.tex $(DOCDIR)\gnuplot_2.tex
	cd $(DOCDIR) && $(LATEX) gnuplot_2.tex && $(LATEX) gnuplot_2.tex && $(LATEX) gnuplot_2.tex
	move $(DOCDIR)\gnuplot_2.dvi $(DOCDIR)\gnuplot.dvi
	del $(DOCDIR)\gnuplot_2*
$(DOCDIR)\gnuplot.ps: $(DOCDIR)\gnuplot.dvi
	$(DVIPS) -o $@ $(DOCDIR)\gnuplot.dvi
$(DOCDIR)\gnuplot.pdf: $(DOCDIR)\gnuplot.tex
	copy $(DOCDIR)\gnuplot.tex $(DOCDIR)\gnuplot_2.tex
	cd $(DOCDIR) && $(PDFLATEX) gnuplot_2.tex && $(PDFLATEX) gnuplot_2.tex && $(PDFLATEX) gnuplot_2.tex
	move $(DOCDIR)\gnuplot_2.pdf $(DOCDIR)\gnuplot.pdf
$(DOCDIR)\gnuplot.tex:  $(DOCDIR)\gnuplot.doc $(DOCDIR)\doc2tex.exe
	$(DOCDIR)\doc2tex.exe $(DOCDIR)\gnuplot.doc $@
$(DOCDIR)\gnuplot.inf:  $(DOCDIR)\gnuplot.ipf
	$(IPF_C) /INF $< $@
$(DOCDIR)\gnuplot.gih:  $(DOCDIR)\gnuplot.doc $(DOCDIR)\doc2gih.exe
	$(DOCDIR)\doc2gih.exe $(DOCDIR)\gnuplot.doc $@
$(DOCDIR)\gnuplot.html: $(DOCDIR)\gnuplot.texi $(DOCDIR)\gnuplot.doc
	$(MAKEINFO) --html -I$(DOCDIR) $(DOCDIR)\gnuplot.texi --no-split --output=$@
$(DOCDIR)\gnuplot.info: $(DOCDIR)\gnuplot.texi $@
	$(MAKEINFO) -I$(DOCDIR) $(DOCDIR)\gnuplot.texi --no-split --output=$@
# $(DOCDIR)\gnuplot.texi: $(DOCDIR)\gnuplot.doc $(DOCDIR)\doc2texi.pl
#	perl $(DOCDIR)\doc2texi.pl $(DOCDIR)\gnuplot.doc >$@
$(DOCDIR)\gnuplot.rtf:  $(DOCDIR)\gnuplot.doc $(DOCDIR)\doc2rtf.exe
	$(DOCDIR)\doc2rtf.exe $(DOCDIR)\gnuplot.doc $@
$(DOCDIR)\gnuplot.ms:   $(DOCDIR)\gnuplot.doc $(DOCDIR)\doc2ms.exe
	$(DOCDIR)\doc2ms.exe $(DOCDIR)\gnuplot.doc $@
$(DOCDIR)\gnuplot.ipf:  $(DOCDIR)\gnuplot.doc $(DOCDIR)\doc2ipf.exe
	$(DOCDIR)\doc2ipf.exe $(DOCDIR)\gnuplot.doc $@
# Assume we need A4 format
gpcard.ps: $(DOCDIR)\gpcard.dvi
	$(DVIPS) -o gpcard_letter.ps $< 
	psresize -pletter -Pa4 gpcard_letter.ps $@
$(DOCDIR)\gpcard.dvi: $(DOCDIR)\gpcard.tex
	cd $(DOCDIR) && $(PLAINTEX) gpcard.tex && $(PLAINTEX) gpcard.tex

#
# Tools for converting the documentation from docs\gnuplot.doc
# in various formats
#

# Some dependency - no rule!
$(DOCDIR)\doc2gih.exe $(DOCDIR)\doc2ipf.exe $(DOCDIR)\doc2info.exe \
$(DOCDIR)\doc2tex.exe $(DOCDIR)\doc2rtf.exe: \
      $(DOCDIR)\termdoc.c $(DOCDIR)\xref.c $(DOCDIR)\allterm.h


$(DOCDIR)\allterm.h: $(CORETERM)
#   echo > $@
#	cd $(TERMDIR) && type *.trm > $@
	cd $(DOCDIR) && cat $(TERMDIR)/*.trm > allterm.c
	cd $(DOCDIR) && $(CPP) -I$(TERMDIR) -DTERM_DRIVER_H -DTERM_HELP allterm.c | \
      sed -e "/^ *$$/d;/^#/d" > allterm.h

$(DOCDIR)\doc2gih.exe:  $(DOCDIR)\doc2gih.c $(DOCDIR)\termdoc.c $(OS2TERM)
	$(CC3) $(CFLAGS3) $(TERMFLAGS) -DALL_TERM_DOC -o $@ $(DOCDIR)\doc2gih.c $(DOCDIR)\termdoc.c
$(DOCDIR)\doc2ipf.exe:  $(DOCDIR)\doc2ipf.c $(DOCDIR)\termdoc.c $(DOCDIR)\xref.c $(OS2TERM)
	$(CC3) $(CFLAGS3) $(TERMFLAGS) -DALL_TERM_DOC -o $@ $(DOCDIR)\doc2ipf.c $(DOCDIR)\termdoc.c $(DOCDIR)\xref.c
$(DOCDIR)\doc2tex.exe:  $(DOCDIR)\doc2tex.c $(DOCDIR)\termdoc.c $(OS2TERM) $(DOCDIR)\allterm.h
	$(CC3) $(CFLAGS3) $(TERMFLAGS) -DALL_TERM_DOC -o $@ $(DOCDIR)\doc2tex.c $(DOCDIR)\termdoc.c
$(DOCDIR)\doc2rtf.exe:  $(DOCDIR)\doc2rtf.c $(DOCDIR)\termdoc.c $(DOCDIR)\xref.c $(OS2TERM)
	$(CC3) $(CFLAGS3) $(TERMFLAGS) -DALL_TERM_DOC -o $@ $(DOCDIR)\doc2rtf.c $(DOCDIR)\termdoc.c $(DOCDIR)\xref.c
$(DOCDIR)\doc2ms.exe:   $(DOCDIR)\doc2ms.c $(DOCDIR)\termdoc.c $(OS2TERM)
	$(CC3) $(CFLAGS3) $(TERMFLAGS) -DALL_TERM_DOC -o $@ $(DOCDIR)\doc2ms.c $(DOCDIR)\termdoc.c
#
# Create binary demo files
#
$(M)binary1 $(M)binary2 $(M)binary3: $(M)bf_test.exe
	cd $(DEMODIR) && bf_test.exe

$(M)bf_test.exe : bf_test.c binary.$(O3) alloc.$(O3)
	$(CC3) $(CFLAGS3) -o $@ bf_test.c binary.$(O3) alloc.$(O3)

#
# Clean up
#

# Clean up all files temporary used
clean:
	IF EXIST *.$(O)                    DEL *.$(O)
	IF EXIST *.$(O2)                   DEL *.$(O2)
	IF EXIST *.$(O3)                   DEL *.$(O3)
	cd $(OS2DIR) && IF EXIST *.$(O2)   DEL *.$(O2)
	IF EXIST $(OS2DIR)\gnupmdrv.res    DEL $(OS2DIR)\gnupmdrv.res
	IF EXIST $(DEMODIR)\bf_test.exe    DEL $(DEMODIR)\bf_test.exe
	IF EXIST $(DOCDIR)\doc2*.exe       DEL $(DOCDIR)\doc2*.exe
	IF EXIST $(DOCDIR)\gnuplot.ipf     DEL $(DOCDIR)\gnuplot.ipf
	IF EXIST core                      DEL core
	IF EXIST $(DOCDIR)\allterm.h       DEL $(DOCDIR)\allterm.h

# Clean up ALL files that were not part of the source distribution
veryclean: clean
	IF EXIST *.exe                     DEL *.exe         
	IF EXIST gnuplot.dvi               DEL gnuplot.dvi
	IF EXIST gnuplot.gih               DEL gnuplot.gih
	IF EXIST gnupmdrv.hlp              DEL gnupmdrv.hlp
	IF EXIST gnuplot.html              DEL gnuplot.html
	IF EXIST gnuplot.inf               DEL gnuplot.inf
	IF EXIST gnuplot.info              DEL gnuplot.info
	IF EXIST gnuplot.ms                DEL gnuplot.ms
	IF EXIST gnuplot.ps                DEL gnuplot.ps
	IF EXIST gnuplot.pdf               DEL gnuplot.pdf
	IF EXIST gnuplot.rtf               DEL gnuplot.rtf
	IF EXIST gnuplot.tex               DEL gnuplot.tex
	IF EXIST gpcard*.ps                DEL gpcard*.ps
	cd $(DOCDIR)  && IF EXIST *.dvi    DEL *.dvi
	cd $(DOCDIR)  && IF EXIST *.log    DEL *.log
	cd $(DOCDIR)  && IF EXIST *.aux    DEL *.aux
	cd $(DOCDIR)  && IF EXIST *.toc    DEL *.toc
	cd $(DEMODIR) && IF EXIST binary?  DEL binary?
