/*
 * $Id: tkcanvas.trm,v 1.7 1998/04/14 00:18:11 drd Exp $
 *
 */

/* GNUPLOT - tkcanvas.trm */

/*[
 * Copyright 1990 - 1993, 1998
 *
 * Permission to use, copy, and distribute this software and its
 * documentation for any purpose with or without fee is hereby granted,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.
 *
 * Permission to modify the software is granted, but not the right to
 * distribute the complete modified source code.  Modifications are to
 * be distributed as patches to the released version.  Permission to
 * distribute binaries produced by compiling modified sources is granted,
 * provided you
 *   1. distribute the corresponding source modifications from the
 *    released version in the form of a patch file along with the binaries,
 *   2. add special version identification to distinguish your version
 *    in addition to the base release version number,
 *   3. provide your name and address as the primary contact for the
 *    support of your modified version, and
 *   4. retain our contact information in regard to use of the base
 *    software.
 * Permission to distribute the released version of the source code along
 * with corresponding source modifications in the form of a patch file is
 * granted with same provisions 2 through 4 for binary distributions.
 *
 * This software is provided "as is" without express or implied warranty
 * to the extent permitted by applicable law.
]*/

/*
 * This file is included by ../term.c.
 *
 * This terminal driver supports:
 *  Tk/Tcl canvas widgets
 *
 * AUTHORS - original dxy.trm
 *  Martin Yii, eln557h@monu3.OZ
 *  Further modified Jan 1990 by Russell Lang, rjl@monu1.cc.monash.oz
 *
 * Port to the Tk/Tcl canvas widget  
 *  D. Jeff Dionne, July 1995 jeff@ryeham.ee.ryerson.ca
 *  Alex Woo, woo@playfair.stanford.edu
 *
 * send your comments or suggestions to (info-gnuplot@dartmouth.edu).
 * 
 */

/*
 * adapted to the new terminal layout by Alex Woo (Sept. 1996)
 */

/*
 * extended interactive Tk/Tcl capabilities 
 * Thomas Sefzick, March 1999, t.sefzick@fz-juelich.de
 */

#include "driver.h"

#ifdef TERM_REGISTER
register_term(tkcanvas)
#endif

#ifdef TERM_PROTO
TERM_PUBLIC void TK_options __PROTO((void));
TERM_PUBLIC void TK_init __PROTO((void));
TERM_PUBLIC void TK_graphics __PROTO((void));
TERM_PUBLIC void TK_text __PROTO((void));
TERM_PUBLIC void TK_linetype __PROTO((int linetype));
TERM_PUBLIC void TK_move __PROTO((unsigned int x, unsigned int y));
TERM_PUBLIC void TK_vector __PROTO((unsigned int x, unsigned int y));
TERM_PUBLIC void TK_put_text __PROTO((unsigned int x, unsigned int y, char *str));
TERM_PUBLIC void TK_reset __PROTO((void));

#define TK_XMAX 1000
#define TK_YMAX 1000

#define TK_XLAST (TK_XMAX - 1)
#define TK_YLAST (TK_XMAX - 1)

#define TK_VCHAR	(25)	/* double actual height of characters */
#define TK_HCHAR	(16)	/* actual width including spacing */
#define TK_VTIC	(18)
#define TK_HTIC	(18)
#endif /* TERM_PROTO */

#ifndef TERM_PROTO_ONLY
#ifdef TERM_BODY

static int tk_angle = 0;
static int tk_lastx;
static int tk_lasty;
static int tk_color = 0;
static int tk_interactive = 0;
static char *tk_colors[] = { "black", "gray", "red", "blue", "green", "brown", "magenta", "cyan" };

/* {ts} 26-mar-99 */
TERM_PUBLIC void TK_options()
{
	if (!END_OF_COMMAND) {
		if (almost_equals(c_token, "i$nteractive")) {
			tk_interactive = 1;
			c_token++;
		}
	}
	sprintf(term_options, "%s", tk_interactive ? "interactive" : "");
}
/* {ts} */

TERM_PUBLIC void TK_init()
{
    fputs("\
proc gnuplot can {\n\
$can delete all\n\
set cmx [lindex [$can configure -width] 4]\n\
set cmy [lindex [$can configure -height] 4]\n",
	  gpoutfile);

    tk_lastx = tk_lasty = tk_color = 0;
}


TERM_PUBLIC void TK_graphics()
{
}


TERM_PUBLIC void TK_reset()
{
}

TERM_PUBLIC void TK_linetype(linetype)
int linetype;
{
    tk_color = (linetype + 2) & 7;
}

TERM_PUBLIC void TK_move(x, y)
unsigned int x, y;
{
    tk_lastx = x;
    tk_lasty = 1000 - y;
}


TERM_PUBLIC void TK_vector(x, y)
unsigned int x, y;
{
/* {ts} 6-apr-99 */
	extern double min_array[], max_array[], base_array[], log_base_array[];
	extern TBOOLEAN log_array[];
	extern int xleft, xright, ybot, ytop;
	extern TBOOLEAN is_3d_plot;

	if (tk_interactive && !is_3d_plot) {
		fprintf(gpoutfile, "set temp [\n");
	}
/* {ts} */
    y = 1000 - y;
    fprintf(gpoutfile,
	    "$can create line [expr $cmx * %d /1000] [expr $cmy * %d /1000] [expr $cmx * %d /1000] [expr $cmy * %d /1000] -fill %s\n",
	    tk_lastx, tk_lasty, x, y, tk_colors[tk_color]);
/* {ts} 6-apr-99 */
#define \
TK_REAL_VALUE(value,axis) \
(log_array[axis])\
?pow(base_array[axis],min_array[axis]+value*(max_array[axis]-min_array[axis]))\
:min_array[axis]+value*(max_array[axis]-min_array[axis])
#define \
TK_X_VALUE(value) \
(double)(value-xleft)/(double)(xright-xleft)
#define \
TK_Y_VALUE(value) \
(double)((TK_YMAX-value)-ybot)/(double)(ytop-ybot)

	if (tk_interactive && !is_3d_plot) {
		fprintf (gpoutfile, "]\n");
		fprintf (gpoutfile,
			"$can bind $temp <Button> \"gnuplot_xy $can $temp %f %f %f %f %f %f %f %f",
			TK_REAL_VALUE(TK_X_VALUE(tk_lastx),FIRST_X_AXIS),
			TK_REAL_VALUE(TK_Y_VALUE(tk_lasty),FIRST_Y_AXIS),
			TK_REAL_VALUE(TK_X_VALUE(tk_lastx),SECOND_X_AXIS),
			TK_REAL_VALUE(TK_Y_VALUE(tk_lasty),SECOND_Y_AXIS),
			TK_REAL_VALUE(TK_X_VALUE(x),FIRST_X_AXIS),
			TK_REAL_VALUE(TK_Y_VALUE(y),FIRST_Y_AXIS),
			TK_REAL_VALUE(TK_X_VALUE(x),SECOND_X_AXIS),
			TK_REAL_VALUE(TK_Y_VALUE(y),SECOND_Y_AXIS));
		if (log_array[FIRST_X_AXIS]) {
			fprintf (gpoutfile, " %f",
				TK_REAL_VALUE(TK_X_VALUE(0.5*(x+tk_lastx)),FIRST_X_AXIS));
		} else {
			fprintf (gpoutfile, " {}");
		}
		if (log_array[FIRST_Y_AXIS]) {
			fprintf (gpoutfile, " %f",
				TK_REAL_VALUE(TK_Y_VALUE(0.5*(y+tk_lasty)),FIRST_Y_AXIS));
		} else {
			fprintf (gpoutfile, " {}");
		}
		if (log_array[SECOND_X_AXIS]) {
			fprintf (gpoutfile, " %f",
				TK_REAL_VALUE(TK_X_VALUE(0.5*(x+tk_lastx)),SECOND_X_AXIS));
		} else {
			fprintf (gpoutfile, " {}");
		}
		if (log_array[SECOND_Y_AXIS]) {
			fprintf (gpoutfile, " %f",
				TK_REAL_VALUE(TK_Y_VALUE(0.5*(y+tk_lasty)),SECOND_Y_AXIS));
		} else {
			fprintf (gpoutfile, " {}");
		}
		fprintf (gpoutfile, "\"\n");
	}

#undef TK_REAL_VALUE
#undef TK_X_VALUE
#undef TK_Y_VALUE

/* {ts} */
    tk_lastx = x;
    tk_lasty = y;
}


TERM_PUBLIC void TK_put_text(x, y, str)
unsigned int x, y;
char *str;
{
    y = 1000 - y;
    fprintf(gpoutfile,
	    "$can create text [expr $cmx * %d /1000] [expr $cmy * %d /1000] -text {%s} -fill %s -anchor w\n",
	    x, y, str, tk_colors[tk_color]);
}

TERM_PUBLIC void TK_text()
{
/* {ts} 6-apr-99 */
	extern double min_array[], max_array[];
	extern int xleft, xright, ybot, ytop;
	extern TBOOLEAN is_3d_plot;
	if (!is_3d_plot) {
		fputs("}\n", gpoutfile);
		fputs("proc gnuplot_plotarea {} {\n", gpoutfile);
		fprintf(gpoutfile,
			"return {%d %d %d %d}\n",
			xleft, xright, 1000-ytop, 1000-ybot);
		fputs("}\n", gpoutfile);
		fputs("proc gnuplot_axisranges {} {\n", gpoutfile);
		fprintf(gpoutfile,
			"return {%f %f %f %f %f %f %f %f}\n",
			min_array[FIRST_X_AXIS], max_array[FIRST_X_AXIS],
			min_array[FIRST_Y_AXIS], max_array[FIRST_Y_AXIS],
			min_array[SECOND_X_AXIS], max_array[SECOND_X_AXIS],
			min_array[SECOND_Y_AXIS], max_array[SECOND_Y_AXIS]);
		if (tk_interactive) {
			fputs("}\n", gpoutfile);
			fputs("proc gnuplot_xy {win id x1s y1s x2s y2s x1e y1e x2e y2e x1m y1m x2m y2m} {\n",
				gpoutfile);
			fputs("if {([llength [info commands user_gnuplot_coordinates]])} {\n",
				gpoutfile);
			fputs("user_gnuplot_coordinates $win $id $x1s $y1s $x2s $y2s $x1e $y1e $x2e $y2e $x1m $y1m $x2m $y2m\n",
				gpoutfile);
			fputs("} else {\n", gpoutfile);
			fputs("if {[string length $x1m]>0} {puts -nonewline \" $x1m\"} else {puts -nonewline \" [expr 0.5*($x1s+$x1e)]\"}\n",
				gpoutfile);
			fputs("if {[string length $y1m]>0} {puts -nonewline \" $y1m\"} else {puts -nonewline \" [expr 0.5*($y1s+$y1e)]\"}\n",
				gpoutfile);
			fputs("if {[string length $x2m]>0} {puts -nonewline \" $x2m\"} else {puts -nonewline \" [expr 0.5*($x2s+$x2e)]\"}\n",
				gpoutfile);
			fputs("if {[string length $y2m]>0} {puts \" $y2m\"} else {puts \" [expr 0.5*($y2s+$y2e)]\"}\n",
				gpoutfile);
			fputs("}\n", gpoutfile);
		}
	}
/* {ts} */
    fputs("}\n", gpoutfile);
    fflush(gpoutfile);
}


#endif /* TERM_BODY */

#ifdef TERM_TABLE
/* replaced options_null with TK_options  {ts} 26-mar-99 */
TERM_TABLE_START(tkcanvas)
    "tkcanvas", "Tk/Tcl canvas widget [interactive]",
    TK_XMAX, TK_YMAX, TK_VCHAR, TK_HCHAR,
    TK_VTIC, TK_HTIC, TK_options, TK_init, TK_reset,
    TK_text, null_scale, TK_graphics, TK_move, TK_vector,
    TK_linetype, TK_put_text, null_text_angle,
    null_justify_text, do_point, do_arrow, set_font_null
TERM_TABLE_END(tkcanvas)

#undef LAST_TERM
#define LAST_TERM tkcanvas

#endif /* TERM_TABLE */
#endif /* TERM_PROTO_ONLY */

#ifdef TERM_HELP
START_HELP(tkcanvas)
"1 tkcanvas",
"?commands set terminal tkcanvas",
"?set terminal tkcanvas",
"?set term tkcanvas",
"?terminal tkcanvas",
"?term tkcanvas",
"?tkcanvas",
" This terminal driver generates tk canvas widget commands.  To use it, rebuild",
" `gnuplot` (after uncommenting or inserting the appropriate line in \"term.h\"),",
" then",
"",
"  gnuplot> set term tkcanvas {interactive}",
"  gnuplot> set output 'plot.file'",
"",
" After invoking \"wish\", execute the following sequence of tcl commands:",
"",
"  % source plot.file",
"  % canvas .c",
"  % pack .c",
"  % gnuplot .c",
"",
" The code generated by `gnuplot` creates a tcl procedure called \"gnuplot\"",
" that takes the name of a canvas as its argument.  When the procedure is",
" called, it clears the canvas, finds the size of the canvas and draws the plot",
" in it, scaled to fit.",
"",
" For 2-dimensional plotting (`plot`) two additional tcl procedures are defined:",
" \"gnuplot_plotarea\" will return a list containing the borders of the plotting",
" area \"xleft, xright, ytop, ybot\" in canvas screen coordinates, while the ranges",
" of the two axes \"x1min, x1max, y1min, y1max, x2min, x2max, y2min, y2max\" in plot",
" coordinates can be obtained calling \"gnuplot_axisranges\".",
" If the \"interactive\" option is specified, mouse clicking on a line segment",
" will print the coordinates of its midpoint to stdout. Advanced actions",
" can happen instead if the user supplies a procedure named",
" \"user_gnuplot_coordinates\", which takes the following arguments:",
" \"win id x1s y1s x2s y2s x1e y1e x2e y2e x1m y1m x2m y2m\",",
" the name of the canvas and the id of the line segment followed by the",
" coordinates of its start and end point in the two possible axis ranges; the",
" coordinates of the midpoint are only filled for logarithmic axes.",
"",
" The current version of `tkcanvas` supports neither `multiplot` nor `replot`."
END_HELP(tkcanvas)
#endif
