dnl Process this file with autoconf to produce a configure script.
dnl configure.in for gnuplot on Unix.
dnl
dnl $Id: configure.in,v 1.111 2002/03/07 16:14:28 lhecking Exp $
dnl
AC_INIT(src/graphics.c)
AM_CONFIG_HEADER(config.h:config.hin)
AC_PREREQ(2.13)

dnl this is actually major.minor ...
PKG_MAJOR="`cat $srcdir/VERSION`"
PATCHLEVEL="`cat $srcdir/PATCHLEVEL`"
AM_INIT_AUTOMAKE(gnuplot, $PKG_MAJOR.$PATCHLEVEL)

dnl Additional command line options

dnl configure.in body

dnl Compiler characteristics
dnl Check for ANSI C prototypes, the const and inline keywords,
dnl and ANSI style stringification
AC_PROG_CC
AM_C_PROTOTYPES
AC_PROG_CPP
AC_C_CONST
AC_C_INLINE
AC_C_STRINGIZE

dnl Various programs
dnl X/Emacs for building lisp packages
AC_CHECK_PROGS(EMACS, emacs xemacs, no)
AC_CHECK_PROGS(PLAINTEX, tex, no)
AC_CHECK_PROGS(LATEX, latex latex2e, no)
AC_CHECK_PROGS(PDFLATEX, pdflatex, no)
AC_CHECK_PROGS(DVIPS, dvips, no)
AC_CHECK_PROGS(TROFF, troff, no)

dnl X Window System files.
AC_SUBST(LIBRARIES_FOR_X)
AC_PATH_XTRA

dnl Needed for LynxOS until AC_PATH_XTRA is fixed
if test "$ac_cv_func_gethostbyname" = no; then
  if test "$ac_cv_lib_nsl_gethostbyname" = no; then
    AC_CHECK_LIB(bsd, gethostbyname, X_EXTRA_LIBS="$X_EXTRA_LIBS -lbsd")
  fi
fi

if test "$no_x" != yes; then
  CPPFLAGS="$CPPFLAGS $X_CFLAGS"
  LIBRARIES_FOR_X="$X_LIBS -lX11 $X_EXTRA_LIBS"
  GNUPLOT_X11=gnuplot_x11
  AC_DEFINE(X11, 1,
            [ Define if you are using the X11 window system. ])

else
  GNUPLOT_X11=
fi

AC_SUBST(GNUPLOT_X11)

dnl Operating systems.
dnl FIXME AC_DEFINE(ISC22)
dnl FIXME AC_DEFINE(KSR)
dnl Check for MSDOS and djgpp, NeXT, Apple MacOsX (NeXT like), BeOS
GP_MSDOS
GP_NEXT
GP_APPLE
GP_BEOS
AM_CONDITIONAL(BUILD_SRC_BEOS_SUBDIR, test x$build_beos_subdir = xyes)

dnl Apparently, -lNeXT_s is needed on NeXT
dnl _instead_ of -lm ...
AC_CHECK_FUNC(sin)
if test "$ac_cv_func_sin" = no ; then
  AC_CHECK_LIB(m,sin)
fi
dnl this has to be after -lsys_s on NeXT
dnl AC_CHECK_LIB(m,sin)

dnl Header files. ANSI first
dnl We prefer that the absense of a macro is the norm, so in syscfg.h
dnl configure's HAVE_XXXX defines are translated into NO_XXXX for ANSI
dnl headers and functions
AC_HEADER_STDC

dnl Header files
dnl ANSI/ISO C, POSIX, others
AC_CHECK_HEADERS(errno.h float.h limits.h locale.h math.h stdlib.h string.h \
  time.h sys/time.h sys/types.h \
  sys/bsdtypes.h sys/ioctl.h sys/param.h sys/select.h sys/socket.h \
  sys/stat.h sys/systeminfo.h sys/timeb.h sys/utsname.h \
  libc.h malloc.h poll.h sgtty.h termios.h values.h
)

if test "$ac_cv_header_math_h" = yes ; then
  AC_MSG_CHECKING([for struct exception in math.h])
  AC_TRY_LINK([#include <math.h>],
    [struct exception *x; x->type; x->name;],
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_STRUCT_EXCEPTION_IN_MATH_H, 1,
              [ Define if math.h declares struct exception for matherr(). ]),
    AC_MSG_RESULT(no))
fi

test "$ac_cv_header_sys_stat_h" = yes && AC_HEADER_STAT

dnl check if unistd actually declares anything. On NeXT 3.2 unistd is
dnl conditionalized for _POSIX_SOURCE
AC_MSG_CHECKING(for unistd.h)
AC_EGREP_HEADER(execv, unistd.h, AC_DEFINE(HAVE_UNISTD_H) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

dnl check if errno.h header declares errno
AC_MSG_CHECKING(if errno variable is declared)
AC_TRY_COMPILE(
[#include <stdio.h>
#ifdef HAVE_ERRNO_H
#include <errno.h>
#endif],
  errno=0,AC_MSG_RESULT(yes),
  AC_DEFINE(EXTERN_ERRNO, 1,
            [ Define if <errno.h> declares errno. ])
  AC_MSG_RESULT(no)
)dnl


dnl Types.
AC_TYPE_SIZE_T
AC_MSG_CHECKING(for time_t in time.h)
AC_EGREP_HEADER(time_t,time.h,
  [ ac_cv_type_time_t=yes; AC_MSG_RESULT(yes) ],
  AC_MSG_RESULT(no)
  AC_CHECK_TYPE(time_t, long))
AC_TYPE_SIGNAL
 

dnl Functions. Standard first, then others

dnl ANSI/ISO and their predecessors
dnl sunos 4 has on_exit() in place of atexit()
dnl gamma is called lgamma on apollos and linux
dnl we prefer lgamma over gamma, see specfun.c
dnl math lib is already available, see operating systems part
AC_CHECK_FUNCS(atexit memcpy memmove memset \
  on_exit bcopy bzero \
  setvbuf strerror strchr strrchr strstr \
  index rindex \
  erf erfc gamma lgamma \
  getcwd poll pclose popen select sleep snprintf stpcpy \
  strcspn strdup strcasecmp stricmp strncasecmp strnicmp \
  sysinfo tcgetattr vfprintf doprnt usleep
)

dnl check, if we have sigsetjmp and siglongjmp.
dnl a trivial AC_CHECK_FUNCS(sigsetjmp) won't do
dnl because sigsetjmp() might be a macro declared
dnl in <setjmp.h>. (joze)
AC_MSG_CHECKING(for sigsetjmp)
AC_TRY_LINK([#include <setjmp.h>], [jmp_buf env; sigsetjmp(env, 1);],
  [AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_SIGSETJMP, 1,
             [ Define if we have sigsetjmp(). ])],
  AC_MSG_RESULT(no)
)

if test "$ac_cv_func_pclose" = yes && test "$ac_cv_func_popen" = yes ; then
  AC_DEFINE(PIPES, 1,
            [ Define if you do have the popen and pclose functions. ])
fi

dnl Argument types of select()
AC_FUNC_SELECT

dnl On SVR3.
dnl FIXME AC_DEFINE(CRIPPLED_SELECT)

dnl Install the lasergnu printer script
LASERGNU=lasergnu_noinstall
AC_ARG_WITH(lasergnu,dnl
[  --with-lasergnu         install lasergnu printer script],
  test "$withval" = yes && LASERGNU=lasergnu_install)

dnl The Linux console driver
AC_ARG_WITH(linux-vga,dnl
[  --with-linux-vga        use the Linux SVGA console driver
                          (requires /usr/lib/libvga)],,
  test -z "$with_linux_vga" && with_linux_vga=no)

dnl check for installed linux vgalib
if test "$with_linux_vga" = yes; then
  AC_MSG_CHECKING(for linux vga library)
  AC_CHECK_LIB(vga, vga_init,
    [AC_DEFINE(LINUXVGA, 1,
               [ Define if this is a Linux system with SuperVGA library. ])
     LINUXSUID='chown root $(bindir)/gnuplot; chmod u+s $(bindir)/gnuplot'
     TERMLIBS="-lvga $TERMLIBS"],
    with_linux_vga=no)
fi

dnl new ggi driver
GGI_SUPPORT=no
AC_ARG_WITH(ggi,dnl
[  --with-ggi[=PATH]       enable the ggi driver (EXPERIMENTAL)],
  [if test "$withval" != no; then
     if test -d $withval/include; then
       CPPFLAGS="$CPPFLAGS -I$withval/include"
     fi
     if test -d $withval/lib; then
       LDFLAGS="$LDFLAGS -L$withval/lib"
     fi
     AC_CHECK_LIB(ggi,ggiInit,
       [TERMLIBS="-lggi $TERMLIBS"
        AC_DEFINE(USE_GGI_DRIVER, 1,
                  [ Define if you want to use the experimental ggi driver. ])
        GGI_SUPPORT=yes
        dnl check if libggiwmh and ggi/wmh.h are found
        AC_CHECK_LIB(ggiwmh,ggiWmhInit,
          [TERMLIBS="-lggiwmh $TERMLIBS"
           AC_CHECK_HEADERS(ggi/wmh.h,,
             AC_MSG_WARN([found ggiwmh library but not ggi/wmh.h
please add path to ggi/wmh.h to CPPFLAGS in Makefile]))
          ])])
   fi])

AC_ARG_WITH(xmi,dnl
[  --with-xmi[=PATH]       ggi's xmi support for pm3d (EXPERIMENTAL)],
  [if test "$withval" != no -a "$GGI_SUPPORT" = yes; then
     if test -d $withval/include; then
       CPPFLAGS="$CPPFLAGS -I$withval/include"
     fi
     if test -d $withval/lib; then
       LDFLAGS="$LDFLAGS -L$withval/lib"
     fi
     AC_CHECK_LIB(xmi,xmiInit,
       [TERMLIBS="-lxmi $TERMLIBS"
        AC_CHECK_HEADERS(ggi/xmi.h)])
   fi])

dnl Use builtin readline or GNU readline
AC_ARG_WITH(readline,dnl
[  --with-readline         use the builtin minimal readline function (default)
  --without-readline      do not use the builtin readline function
  --with-readline=gnu     use the GNU readline library
  --with-readline=PATH    Specify the location of GNU readline],,
  test -z "$with_readline" && with_readline=yes)

dnl Gnuplot history, needs GNU readline
AC_ARG_ENABLE(history-file,dnl
[  --enable-history-file   use history file (requires GNU readline)],,
  test -z "$enable_history_file" && enable_history_file=no)

dnl GNU readline and the required terminal library
if test "$with_readline" != no; then
  if test "$with_readline" != yes; then
    dnl check for terminal library
    dnl this is a very cool solution from octave's configure.in
    gp_tcap=""
    for termlib in ncurses curses termcap terminfo termlib; do
      AC_CHECK_LIB(${termlib}, tputs, [gp_tcap="$gp_tcap -l$termlib"])
      case "$gp_tcap" in
        *-l${termlib}*)
          break
        ;;
      esac
    done

    if test "$with_readline" = gnu; then
      AC_CHECK_LIB(readline, readline,
       TERMLIBS="-lreadline $gp_tcap $TERMLIBS",, ${gp_tcap})
    else
      if test -d $with_readline/include; then
        CPPFLAGS="$CPPFLAGS -I$with_readline/include"
      fi
      if test -d $with_readline/lib; then
        LDFLAGS="$LDFLAGS -L$with_readline/lib"
      fi

      AC_CHECK_LIB(readline,readline,
        TERMLIBS="-lreadline $gp_tcap $TERMLIBS",,[${gp_tcap}])

    fi

    if test "$ac_cv_lib_readline_readline" = no; then
      AC_MSG_WARN([GNU readline not found - falling back to builtin readline])
      with_readline=yes
    else
      AC_DEFINE(HAVE_LIBREADLINE, 1,
                [ Define if you are using the GNU readline library. ])
      AC_CHECK_HEADERS(readline/readline.h,,
        AC_MSG_WARN([found GNU readline library but not readline.h
please add path to readline.h to CPPFLAGS in Makefile]))
      AC_CHECK_HEADERS(readline/history.h,,
        AC_MSG_WARN([found GNU readline library but not history.h
please add path to history.h to CPPFLAGS in Makefile]))

      if test "$enable_history_file" = yes; then
        AC_CHECK_HEADERS(readline/tilde.h,
          AC_DEFINE(GNUPLOT_HISTORY, 1,
                    [ Define if you want to use a gnuplot history file with GNU readline. ]))
      fi

    fi # ! ac_cv_lib_readline_readline = no

  fi # ! with_readline != yes

  if test "$with_readline" = yes; then
    AC_DEFINE(READLINE, 1,
              [ Define if you want to use the included readline function. ])
  fi

fi
dnl end readline

dnl If no PATH argument given, use the Unix plot library
dnl Else use either GNU libplot from plotutils,
dnl or ancient GNU graphics libplot
AC_ARG_WITH(plot,dnl
[  --with-plot[=PATH]      use the Unix plot library],
  [if test "$withval" = yes; then
     dnl Unix plot library
     AC_CHECK_LIB(plot,openpl,
       [AC_DEFINE(UNIXPLOT, 1,
                  [ Define if you want to use the standard Unix plot library. ])
        TERMLIBS="-lplot $TERMLIBS"],
       with_plot=no)
   elif test "$withval" != no; then
     dnl GNU plotutils 2.2 or better
     if test -d $withval/include; then
       CPPFLAGS="$CPPFLAGS -I$withval/include"
     fi
     if test -d $withval/lib; then
       LDFLAGS="$LDFLAGS -L$withval/lib"
     fi
     TERMXLIBS="$X_LIBS -lXaw -lXmu -lXt -lXext -lX11"
     AC_CHECK_LIB(plot,pl_textangle,
       [TERMLIBS="-lplot $TERMLIBS"
        AC_DEFINE(GNUGRAPH, 1,
                  [ Define if you want to use the GNU version of the Unix plot library. ])],
       [AC_MSG_WARN([GNU plotutils v2.2 or newer required -- disabling gnugraph terminal])
        TERMXLIBS=
        with_plot=no],
       [$TERMXLIBS])
   fi])
dnl end libplot

dnl JPEG library
AC_ARG_WITH(jpeg,dnl
[  --with-jpeg[=PATH]      specify location of libjpeg if default is broken
                           (no to turn off JPEG support in gd.trm) ],
  [
  if test "$withval" = no; then
    with_jpeg=no
  elif test -d $withval/lib; then
    LDFLAGS="$LDFLAGS -L$withval/lib"
  elif test -d "$withval"; then
    LDFLAGS="$LDFLAGS -L$withval"
  fi
  ]
  )
dnl end jpeg

dnl PNG library path if required for *NEW* png driver gd.trm
AC_ARG_WITH(libpng,dnl
[  --with-libpng[=PATH]    specify location of libpng if default is broken
			  (==>specify only if not found by default!) ], 
  [
  if test -d $withval/lib; then
    LDFLAGS="$LDFLAGS -L$withval/lib"
  elif test -d "$withval"; then
    LDFLAGS="$LDFLAGS -L$withval"
  fi
  ]
  )
dnl end png

dnl The location of Tom Boutell's gd library
AC_ARG_WITH(gd,dnl
[  --with-gd[=PATH]        specify location of Tom Boutell's gd library
                          (version >= 1.8 needed for new png/jpeg driver)
                          (version 1.3 or 1.4 needed for gif driver) ], ,
			  withval=yes)
  
  if test "$withval" != no; then
     if test -d "$withval/include"; then
       CPPFLAGS="$CPPFLAGS -I$withval/include"
     else
       test -d "$withval" && CPPFLAGS="$CPPFLAGS -I$withval"
     fi 
     if test -d "$withval/lib"; then
       LDFLAGS="$LDFLAGS -L$withval/lib"
     else
       test -d "$withval" && LDFLAGS="$LDFLAGS -L$withval"
     fi 

     AC_CHECK_LIB(gd,gdImageCreate,
       [TERMLIBS="-lgd $TERMLIBS"
        AC_CHECK_HEADERS(gd.h,
	dnl ACTION-IF-FOUND
        AC_DEFINE(HAVE_LIBGD, 1, [ Define if you have Thomas Boutell's gd library. ]),
	dnl ACTION-IF-NOT-FOUND
        AC_MSG_WARN([found gd library but not gd.h])
	AC_MSG_WARN([please add path to gd.h to CPPFLAGS in Makefile])
        )],
       AC_MSG_RESULT([  GD library not found ]))

     AC_CHECK_LIB(gd,gdImagePng,
       [TERMLIBS="$TERMLIBS -lpng -lz"
       AC_DEFINE(HAVE_NEWGD, 1, [ Define if you have libgd version >= 1.8 ])
       AC_DEFINE(HAVE_PNG,   1, [ Define if you have want png support ])
       with_png="yes"
       with_newgd="yes"
       ],
       [
       AC_MSG_WARN([ No PNG support found in libgd, or libpng or libz not found  ])
       with_png="no"
       ],
       -lpng -lz
       )

     if test "$with_jpeg" != no; then
     AC_CHECK_LIB(gd,gdImageJpeg,
       [TERMLIBS="$TERMLIBS -ljpeg"
       AC_DEFINE(HAVE_JPEG, 1, [ Define if you have libjpeg and libgd version >= 1.8 ])
       with_jpeg="yes"
       ],
       [
       AC_MSG_WARN([ No JPEG support found in libgd, or libjpeg not found  ])
       with_jpeg="no"
       ],
       -ljpeg
       )
     fi

     AC_CHECK_LIB(gd,gdImageGif,
       AC_DEFINE(HAVE_GIF, 1, [ Define if you have libgd version 1.2 - 1.4 ]),
       AC_MSG_WARN([ No GIF support found in libgd  ])
       )

   fi

dnl end gd library

dnl freetype library (may be required to specify along with gd)
dnl There should really be a test on whether TTF support was built into libgd
if test "$with_newgd" = yes; then
AC_ARG_WITH(freetype,dnl
[  --with-freetype[=PATH]  location of libfreetype (TrueType font support)
                          (used via libgd by new png/jpeg driver) 
			  (==>specify only if not found by default!) ], 
  [if test "$withval" != no; then
     if test -d $withval/include; then
       CPPFLAGS="$CPPFLAGS -I$withval/include"
     else
       CPPFLAGS="$CPPFLAGS -I$withval"
     fi 
     if test -d $withval/lib; then
       LDFLAGS="$LDFLAGS -L$withval/lib"
     else
       LDFLAGS="$LDFLAGS -L$withval"
     fi 
     AC_CHECK_LIB(freetype, FT_Open_Face,
       [TERMLIBS="-lfreetype $TERMLIBS"
     	with_ttf="yes"
       ],
       AC_MSG_RESULT([  freetype library not found ]))
   fi],
   with_ttf="yes"
  )
  if test "$with_ttf" = yes; then
    AC_DEFINE(HAVE_TTF, 1, [ Define if TrueType font support in libgd ])
  fi
fi
dnl end freetype library

dnl gif terminal support emulated using Tom Boutell's new gd library
AC_ARG_WITH(gif,dnl
[  --with-gif=png          'set term gif' produces png images instead
                          (libgd version >= 1.8) ],,
)
if test "$with_gif" = png; then
  if test "$with_newgd" = yes; then
    AC_DEFINE(PNG_FOR_GIF, 1,
      [ Define to have 'set term gif' produce PNG images instead ])
  else
    with_gif=
  fi
fi
dnl

dnl The *OLD* Portable Network Graphics (png) terminal
if test "$with_newgd" != yes ; then
AC_ARG_WITH(png,dnl
[  --with-png[=PATH]       enable *old* png terminal (requires libpng and libz)
                          (libgd versions 1.2 - 1.4) ],
  [if test [-n] "$with_png" -a "$withval" != no; then
     if test -d $withval/include; then
       CPPFLAGS="$CPPFLAGS -I$withval/include"
     fi
     if test -d $withval/lib; then
       LDFLAGS="$LDFLAGS -L$withval/lib"
     fi
     with_png=yes
   fi],with_png=no)

if test "$with_png" = yes; then
  AC_CHECK_LIB(png,png_init_io,
    [TERMLIBS="-lpng -lz $TERMLIBS"
     AC_CHECK_HEADER(png.h,
     [AC_CHECK_HEADER(zlib.h,,
      AC_MSG_WARN([found z library but not zlib.h
please add path to zlib.h to CPPFLAGS in Makefile]))
      AC_EGREP_CPP([You lose], [#include "png.h"
#if PNG_LIBPNG_VER < 89
You lose.
#endif
],
        AC_MSG_WARN([- libpng too old - not including png driver])
        ac_cv_header_png_h=no)],
     AC_MSG_WARN([found png library but not png.h
please add path to png.h to CPPFLAGS in Makefile]))],
    AC_MSG_RESULT([  PNG library not found.
    See term/png.trm for download details]),
    [-lz])

  if test "$ac_cv_header_png_h" = yes; then
    AC_DEFINE(HAVE_LIBPNG, 1,
              [ Define if you have the png library. ])
  fi
fi
fi
dnl end png and z

dnl The Portable Document Format (PDF) terminal
AC_ARG_WITH(pdf,dnl
[  --with-pdf[=PATH]       enable pdf terminal 
                          (requires PDFLib)],
  [if test "$withval" != no; then
     if test -d $withval/include; then
       CPPFLAGS="$CPPFLAGS -I$withval/include"
     fi
     if test -d $withval/lib; then
       LDFLAGS="$LDFLAGS -L$withval/lib"
     fi
     with_pdf=yes
   fi],with_pdf=no)

if test "$with_pdf" = yes; then
  AC_CHECK_LIB(pdf,PDF_get_majorversion,
    [TERMLIBS="-lpdf $TERMLIBS"
     AC_DEFINE(HAVE_LIBPDF,1,
               [ Define if you have the pdf library. ])
     AC_CHECK_HEADERS(pdflib.h,,
       AC_MSG_WARN([found pdf library but not pdflib.h
please add path to pdflib.h to CPPFLAGS in Makefile]))
     AC_CHECK_HEADERS(zlib.h,,
       AC_MSG_WARN([found z library but not zlib.h
please add path to zlib.h to CPPFLAGS in Makefile]))],
    AC_MSG_RESULT([  PDF library not found.
  See term/pdf.trm for download details]))
fi
dnl end pdf

dnl How do we detect the Ultrix X libraries?
dnl Or is it really a server (run-time) problem?
dnl FIXME AC_DEFINE(ULTRIX_KLUDGE)

dnl Removed enable options for these
dnl Just autodetect

dnl SCO cgi
AC_EGREP_CPP(yes,
[#ifdef SCO
yes
#endif
],AC_CHECK_LIB(ccgi, v_opnwk,
    AC_DEFINE(CGI, 1,
              [ Define if you want to use the CGI terminal under SCO. ])
              TERMLIBS="-lccgi $TERMLIBS"))

dnl Sun sunview
AC_EGREP_CPP(yes,
[#ifdef sun
yes
#endif
], AC_CHECK_LIB(suntool, window_create,
    AC_CHECK_HEADER(suntool/sunview.h,
    AC_DEFINE(SUN, 1,
              [ Define if you want to use the sunview terminal (sun). ])
    TERMLIBS="-lsuntool -lsunwindow -lpixrect $TERMLIBS"),,
    [-lsunwindow -lpixrect]))

dnl Process with and enable options

dnl Use .gnuplot file in current directory
AC_ARG_WITH(cwdrc,dnl
[  --with-cwdrc            check current directory for .gnuplot file,
                          normally disabled for security reasons],,
  [if test "$withval" = yes; then
     AC_DEFINE(NOCWDRC, 1,
               [ Define if you do not want to read .gnuplot in the current directory. ])
   fi])

dnl Wether we want to build the lisp files
config_lisp=lisp
AC_ARG_WITH(lisp-files,dnl
[  --without-lisp-files    do not build emacs lisp files],
  [if test "$with_lisp_files" = no; then
     config_lisp=
   fi])
dnl only if X/Emacs was found
if test "$EMACS" = no; then
  config_lisp=
  with_lisp_files=no
fi

AC_CONFIG_SUBDIRS($config_lisp)
AM_CONDITIONAL(BUILD_LISP_SUBDIR, test x$config_lisp = xlisp)

dnl Sort help/subtopic tables by row or column
AC_ARG_WITH(row-help,dnl
[  --with-row-help         format help and subtopic tables by row (default)
  --without-row-help      format help and subtopic tables by column],
  [if test "$with_row_help" = no; then
     AC_DEFINE(COLUMN_HELP, 1,
               [ Define if you want online help and subtopic tables sorted by column. ])
   fi])

dnl Wether we want to create the LaTeX tutorial
TUTORIAL=tutorial
AC_ARG_WITH(tutorial,dnl
[  --without-tutorial      do not build LaTeX tutorial],,
  [if test "$with_tutorial" = no; then
     TUTORIAL=notutorial
   fi])
dnl only if latex/2e is found
if test "$LATEX" = no; then
  TUTORIAL=notutorial
  with_tutorial=no
fi

dnl use mouse for x11 interface
AC_ARG_ENABLE(mouse,dnl
[  --enable-mouse          enable mouse for the x11 terminal],,
  test -z "$enable_mouse" && enable_mouse=yes)

if test "$enable_mouse" = yes; then
  AC_DEFINE(USE_MOUSE, 1,
            [ Define if you want to have mouse support for the x11 terminal. ])
  AC_DEFINE(PIPE_IPC, 1,
            [ Unix-type of Interprocess Communication is required for mouse support. ])
fi

dnl pm3d
AC_ARG_ENABLE(pm3d,dnl
[  --enable-pm3d           enable pm3d],,
  test -z "$enable_pm3d" && enable_pm3d=yes)

if test "$enable_pm3d" = yes; then
  AC_DEFINE(PM3D, 1,
            [ Define if you want to have Petr Mikulik's fancy pm3d. ])
fi

dnl check for installed linux vgagl lib if
dnl both pm3d and linux_vga are defined.
if test "$with_linux_vga" = yes -a "$enable_pm3d" = yes; then
  gp_save_LIBS="$LIBS"
  dnl make sure LIBS contains -lvga
  LIBS="$TERMLIBS $LIBS"
  AC_MSG_CHECKING(for the vgagl library)
  AC_CHECK_LIB(vgagl, gl_hline,
    [LIBS="-lvgagl $LIBS"
     AC_CHECK_HEADERS(vgagl.h,
      [AC_DEFINE(VGAGL, 1, [ Define if the vgagl libray is present. ])
       dnl yup, we've the libvgagl.
       dnl check now, if lib3dkit is found.
       AC_CHECK_LIB(3dkit, gl_striangle,
         [AC_CHECK_HEADERS(3dkit.h,
            [dnl success! If we're here, all checks for
             dnl the vgagl terminal driver succeeded.
             AC_DEFINE(THREEDKIT,1,[ Define if the 3dkit libray is present. ])
             AC_DEFINE(EXTENDED_COLOR_SPECS,1,
                       [ Define if color information should be passed for each vertex. ])
             VGAGLLIB="-l3dkit -lvgagl"
             with_vgagl=yes
            ],dnl <-- 3dkit.h found
            [
             with_vgagl=no
             AC_MSG_RESULT([unable to find 3dkit.h])
            ]dnl <-- 3dkit.h not found
          )
         ],dnl <-- 3dkit is present
         [
          with_vgagl=no
          AC_MSG_RESULT([unable to find lib3dkit])
         ]dnl <-- 3dkit is not present
       )
      ],dnl <-- vgagl.h is present
      [
       with_vgagl=no
       AC_MSG_RESULT([unable to find vgagl.h])
      ]dnl <-- vgagl.h is not present
     )
    ],dnl <-- libvgagl was found
    [
     with_vgagl=no
     AC_MSG_RESULT([unable to find libvgagl])
    ]dnl <-- libvgagl was not found
  )
  dnl restore LIBS
  LIBS="$gp_save_LIBS"
fi

TERMLIBS="$VGAGLLIB $TERMLIBS"

dnl filledboxes
AC_ARG_ENABLE(filledboxes,dnl
[  --enable-filledboxes    enable filledboxes style (EXPERIMENTAL)],
  [if test "$enableval" = yes; then
     AC_DEFINE(USE_ULIG_FILLEDBOXES, 1,
               [ Define if you want to have Uli Gruenebaum's filledboxes style. ])
   fi])

dnl relative boxwidth
AC_ARG_ENABLE(relative-boxwidth,dnl
[  --enable-relative-boxwidth    enable relative_boxwidths (EXPERIMENTAL)],
  [if test "$enableval" = yes; then
     AC_DEFINE(USE_ULIG_RELATIVE_BOXWIDTH, 1,
               [ Define if you want to have Uli Gruenebaum's relative boxwidth. ])
   fi])

dnl thin plate splines patch
AC_ARG_ENABLE(thin-splines,dnl
[  --enable-thin-splines   enable thin plate splines (EXPERIMENTAL)],
  [if test "$enableval" = yes; then
     AC_DEFINE(THIN_PLATE_SPLINES_GRID, 1,
               [ Define to use thin plate spines. EXPERIMENTAL ])
   fi])

dnl IRIS terminal on IRIS4D series computer
AC_ARG_ENABLE(iris,dnl
[  --enable-iris           enable IRIS terminal (IRIS4D only)],
  [if test "$enableval" = yes; then
     AC_CHECK_LIB(gl_s,winopen,
       AC_DEFINE(IRIS, 1,
                 [ Define if you want to use the IRIS terminal on IRIS4D series computers. ])
       TERMLIBS="-lgl_s $TERMLIBS",enable_iris=no)
   fi])

dnl MGR Window system
AC_ARG_ENABLE(mgr,dnl
[  --enable-mgr            enable MGR terminal],
  [if test "$enableval" = yes; then
     AC_CHECK_LIB(mgr,m_getinfo,
       AC_DEFINE(MGR, 1, [ Define if you want to use the MGR Window system. ])
       TERMLIBS="-lmgr -lpixrect $TERMLIBS",enable_mgr=no,[-lpixrect])
   fi])

dnl Redwood Graphics Interface Protocol
AC_ARG_ENABLE(rgip,dnl
[  --enable-rgip           enable Redwood Graphics Interface Protocol],
  [if test "$enableval" = yes; then
     AC_DEFINE(RGIP, 1,
               [ Define if you want to use the Redwood Graphics Interface Protocol. ])
   fi])

dnl Substitute variables
AC_SUBST(PACKAGE)
AC_SUBST(PKG_MAJOR)
AC_SUBST(VERSION)
AC_SUBST(LASERGNU)
AC_SUBST(LINUXSUID)
AC_SUBST(TERMLIBS)
AC_SUBST(TERMXLIBS)
AC_SUBST(TUTORIAL)

dnl Write Makefiles and configuration header
AC_OUTPUT([Makefile
           config/Makefile
           demo/Makefile
           docs/Makefile
           m4/Makefile
           man/Makefile
           src/Makefile
           term/Makefile
           tutorial/Makefile], \
          [test -z "$CONFIG_HEADERS" || echo timestamp >stamp-h
          ])

dnl Report configuration
eval gp_datadir=$datadir
test "$gp_datadir" = NONE/share && gp_datadir=/usr/local/share
AC_MSG_RESULT([
** Configuration summary for $PACKAGE $VERSION:

  Where is the help file?           $gp_datadir/gnuplot.gih
])

test "$with_lasergnu" = yes && \
  AC_MSG_RESULT([  Install lasergnu printer script])

if test "$with_linux_vga" = yes; then
  AC_MSG_RESULT([  Use the Linux SVGA console driver])
  AC_MSG_RESULT([    SECURITY NOTICE: SVGAlib requires that])
  AC_MSG_RESULT([    gnuplot is installed suid root!])
fi

test "$with_vgagl" = yes && \
  AC_MSG_RESULT([  enable vgagl terminal with mouse and pm3d support])

test "$GGI_SUPPORT" = yes && \
  AC_MSG_RESULT([  Enable ggi terminal (EXPERIMENTAL)])

test "$ac_cv_header_ggi_xmi_h" = yes && \
  AC_MSG_RESULT([  Enable ggi's xmi support for pm3d (EXPERIMENTAL)])

if test "$with_readline" != no; then
  if test "$with_readline" != yes; then
    AC_MSG_RESULT([  Use GNU readline library])
      test -n "$gp_tcap" && AC_MSG_RESULT([    with ${gp_tcap}])
      test "$enable_history_file" = yes && \
        AC_MSG_RESULT([    enable history file])
  else
    AC_MSG_RESULT([  Use builtin minimal readline])
  fi
fi

if test x"$with_plot" != x; then
  if test "$with_plot" = yes; then
    AC_MSG_RESULT([  Use the Unix plot library])
  elif test "$with_plot" != no; then
    AC_MSG_RESULT([  Use the GNU plot library])
  fi
fi

test "$ac_cv_lib_gd_gdImageGif" = yes && \
  AC_MSG_RESULT([  Enable generation of GIF files])

test "$ac_cv_lib_gd_gdImagePng" = yes && \
  AC_MSG_RESULT([  Enable PNG files using new gd driver])

test "$with_ttf" = yes && \
  AC_MSG_RESULT([  Enable TTF fonts using new gd driver])

test "$ac_cv_header_png_h" = yes && \
  AC_MSG_RESULT([  Enable PNG files using old driver])

test "$with_gif" = png && \
  AC_MSG_RESULT([  Set term gif will produce PNG images instead ])

test "$ac_cv_lib_gd_gdImageJpeg" = yes && \
  AC_MSG_RESULT([  Enable generation of JPEG files])

test "$ac_cv_header_pdflib_h" = yes && \
  AC_MSG_RESULT([  Enable generation of PDF files])

test "$with_cwdrc" = yes && \
  AC_MSG_RESULT([  Check current directory for .gnuplot file])

test "$with_lisp_files" != no && \
  AC_MSG_RESULT([  Build gnuplot-mode for X/Emacs])

test "$with_row_help" = no && \
  AC_MSG_RESULT([  Sort help/subtopic tables by column])

test "$TUTORIAL" = tutorial && \
  AC_MSG_RESULT([  Build LaTeX tutorial])

if test "$no_x" != yes; then
  AC_MSG_RESULT([  Use the X Window System ])
  test "$GNUPLOT_X11" != gnuplot_x11 && \
    AC_MSG_RESULT([  X11 driver name: $GNUPLOT_X11])
  test "$enable_mouse" = yes && \
    AC_MSG_RESULT([  Enable mouse for X11])
fi

test "$enable_pm3d" = yes && \
  AC_MSG_RESULT([  Enable pm3d])

test "$enable_filledboxes" = yes && \
  AC_MSG_RESULT([  Enable filledboxes (EXPERIMENTAL)])

test "$enable_relative_boxwidth" = yes && \
  AC_MSG_RESULT([  Enable relative boxwidths (EXPERIMENTAL)])

test "$enable_thin_splines" = yes && \
  AC_MSG_RESULT([  Enable thin plate splines (EXPERIMENTAL)])

test "$enable_iris" = yes && \
  AC_MSG_RESULT([  Enable IRIS terminal])

test "$enable_mgr" = yes && \
  AC_MSG_RESULT([  Enable MGR terminal])

if test "$enable_rgip" = yes ; then
  AC_MSG_RESULT([  Enable RGIP terminal])
fi

dnl end config report

dnl end configure.in
