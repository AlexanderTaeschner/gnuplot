# Makefile.in for GNUPLOT documentation
#
# Note that the top-level file for documentation is gnuplot.doc.
# See README.
#
# To print manual:
#
#   For LaTeX
#       make gnuplot.dvi
#       (print or view gnuplot.dvi)
#     or (requires pdflatex)
#       make pdf
#       (print or view gnuplot.pdf)
#     or
#       make ps
#       (print or view gnuplot.ps)
#
#   For groff (GNU troff}
#       make grotxt
#       (print or view gnuplot.txt)
#     or
#       make grodvi
#       (print or view gnuplot.dvi)
#     or
#       make grops
#       (print or view gnuplot.ps)
#
#   For nroff
#     make gnuplot.nroff
#     (print or view gnuplot.nroff)
#
#   For troff
#     make "TROFF=itroff" troff    (use your troff here)
#

# default is what is needed for interactive gnuplot
all: gnuplot.gih

# this tells GNU make not to export variables into the environment
# But other makes dont understand its significance, so it must
# not be the first target in the file. So it is here, before
# any variables are created, but after the default target
.NOEXPORT:

SHELL = /bin/sh

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
datadir = @datadir@
infodir = @infodir@
srcdir = @srcdir@
top_builddir = ..
top_srcdir = @top_srcdir@
VPATH = @srcdir@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

CC     = @CC@
CPP    = @CPP@
DEFS   = @DEFS@
CPPFLAGS = @CPPFLAGS@
CFLAGS = @CFLAGS@
INCLUDES = -I.. -I$(top_srcdir)/src -I$(top_srcdir)/term -I.
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@

COMPILE = $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
LINK = $(CC) $(CFLAGS) $(LDFLAGS) -o $@

.c.o:
	$(COMPILE) -c $<

# The makeinfo command from GNU texinfo
MAKEINFO = @MAKEINFO@

# Required for the temporary .info file fix
EMACS = @EMACS@

# substitute your troff command (and any flags) for this one
TROFF = @TROFF@

# LaTeX command, either latex or latex2e or no
LATEX = @LATEX@

# PlainTeX
PLAINTEX = @PLAINTEX@

# PDFLaTeX command
PDFLATEX = @PDFLATEX@

# substitute your DVI to PostScript conversion program here
DVIPS = @DVIPS@

T = ${srcdir}/../term
CORETERM = $(T)/aed.trm $(T)/ai.trm $(T)/amiga.trm $(T)/apollo.trm \
$(T)/atariaes.trm $(T)/atarivdi.trm $(T)/be.trm $(T)/cgi.trm $(T)/cgm.trm \
$(T)/corel.trm $(T)/debug.trm $(T)/djsvga.trm $(T)/dumb.trm $(T)/dxf.trm \
$(T)/dxy.trm $(T)/eepic.trm $(T)/emxvga.trm $(T)/epson.trm $(T)/excl.trm \
$(T)/fg.trm $(T)/fig.trm $(T)/gif.trm $(T)/gnugraph.trm $(T)/gpic.trm \
$(T)/gpr.trm $(T)/grass.trm $(T)/hp26.trm $(T)/hp2648.trm $(T)/hp500c.trm \
$(T)/hpgl.trm $(T)/hpljii.trm $(T)/hppj.trm $(T)/imagen.trm $(T)/iris4d.trm \
$(T)/kyo.trm $(T)/latex.trm $(T)/linux.trm $(T)/mac.trm $(T)/metafont.trm \
$(T)/mgr.trm $(T)/mif.trm $(T)/multitos.trm $(T)/next.trm $(T)/pbm.trm \
$(T)/pc.trm $(T)/pm.trm $(T)/png.trm $(T)/post.trm $(T)/pslatex.trm \
$(T)/pstricks.trm $(T)/qms.trm $(T)/regis.trm $(T)/rgip.trm $(T)/sun.trm \
$(T)/t410x.trm $(T)/table.trm $(T)/tek.trm $(T)/texdraw.trm $(T)/tgif.trm \
$(T)/tkcanvas.trm $(T)/tpic.trm $(T)/unixpc.trm $(T)/unixplot.trm \
$(T)/v384.trm $(T)/vws.trm $(T)/win.trm $(T)/x11.trm $(T)/xlib.trm

DIST_COMMON = README Makefile.in

SOURCES = checkdoc.c doc2gih.c doc2hlp.c doc2ipf.c doc2ms.c doc2rnh.c \
doc2rtf.c doc2tex.c termdoc.c xref.c

BUILT_SOURCES = allterm.h

HEADERS = doc2x.h xref.h

EXTRA_DIST = doc2texi.el gnuplot.doc gnuplot.texi gpcard.tex makefile.ami \
makefile.dst titlepag.ms titlepag.tex toc_entr.sty old psdoc

CLEANFILES = doc2tex gnuplot.tex gnuplot.dvi gnuplot.aux gnuplot.log \
gnuplot.toc gnuplot.pdf gnuplot.ps gpcard.dvi gpcard.log gpcard.ps alldoc2gih \
doc2gih gnuplot.gih doc2hlp gnuplot.hlp gnuplot.html gnuplot.info* doc2ipf \
gnuplot.ipf doc2ms gnuplot.ms doc2rnh gnuplot.rnh doc2rtf gnuplot.rtf \
gnuplot.nroff checkdoc

DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(EXTRA_DIST)

allterm.h: $(CORETERM)
	@echo "Building allterm.h"
	@cat $(top_srcdir)/term/*.trm > allterm.c
	$(CPP) -I$(top_srcdir)/term -DTERM_DRIVER_H -DTERM_HELP allterm.c | \
	  sed '/^ *$$/d;/^#/d' > allterm.h
	@rm -f allterm.c

# for debugging
alldoc: check dvi gih hlp html info ipf ms nroff pdf ps rnh rtf

### [tn]roff documentation
troff: gnuplot.ms titlepag.ms
	@if [ "$(srcdir)" = "$(top_builddir)" ] ; then \
	    tbl gnuplot.ms | eqn | $(TROFF) -ms ; \
	else \
	    < gnuplot.ms sed "s,titlepag\.ms,$(srcdir)/titlepag\.ms," |\
	      tbl | eqn | $(TROFF) -ms ; \
	fi

nroff: gnuplot.nroff

gnuplot.nroff: gnuplot.ms titlepag.ms
	@if [ "$(srcdir)" = "$(top_builddir)" ] ; then \
	    tbl gnuplot.ms | neqn | nroff -ms | col > gnuplot.nroff ; \
	else \
	    < gnuplot.ms sed "s,titlepag\.ms,$(srcdir)/titlepag\.ms," |\
	      tbl | neqn | nroff -ms | col > gnuplot.nroff ; \
	fi

### groff documentation

groff: grotxt grodvi grops

grotxt: gnuplot.ms titlepag.ms
	@if [ "$(srcdir)" = "$(top_builddir)" ] ; then \
	    groff -s -p -t -e -ms -Tlatin1 gnuplot.ms > gnuplot.txt ; \
	else \
	    sed "s,titlepag\.ms,$(srcdir)/titlepag\.ms," gnuplot.ms |\
	      groff -s -p -t -e -ms -Tlatin1 gnuplot.ms > gnuplot.txt ; \
	fi

grodvi: gnuplot.ms titlepag.ms
	@if [ "$(srcdir)" = "$(top_builddir)" ] ; then \
	    groff -s -p -t -e -ms -Tdvi gnuplot.ms > gnuplot.dvi ; \
	else \
	    sed "s,titlepag\.ms,$(srcdir)/titlepag\.ms," gnuplot.ms |\
	      groff -s -p -t -e -ms -Tdvi gnuplot.ms > gnuplot.dvi ; \
	fi

grops: gnuplot.ms titlepag.ms
	@if [ "$(srcdir)" = "$(top_builddir)" ] ; then \
	    groff -s -p -t -e -ms -Tps gnuplot.ms > gnuplot.ps ; \
	else \
	    sed "s,titlepag\.ms,$(srcdir)/titlepag\.ms," gnuplot.ms |\
	      groff -s -p -t -e -ms -Tps gnuplot.ms > gnuplot.ps ; \
	fi

### doc2xxx dependencies
ms: gnuplot.ms

gnuplot.ms: doc2ms $(srcdir)/gnuplot.doc
	./doc2ms $(srcdir)/gnuplot.doc gnuplot.ms

doc2ms: doc2ms.o termdoc.o
	$(LINK) doc2ms.o termdoc.o $(LIBS)

doc2ms.o: doc2ms.c $(BUILT_SOURCES)
	$(COMPILE) -DALL_TERM_DOC -c $(srcdir)/doc2ms.c

### html
html: gnuplot.html

# requires makeinfo (GNU texinfo) 4.0 or better
gnuplot.html: $(srcdir)/gnuplot.texi $(srcdir)/gnuplot.doc
	$(MAKEINFO) --html -I$(srcdir) $(srcdir)/gnuplot.texi --no-split --output=$@

### PDF documentation
pdf: gnuplot.pdf

gnuplot.pdf: gnuplot.tex
	@if test $(PDFLATEX) != no ; then \
	  TEXINPUTS=.:$(srcdir):${TEXINPUTS}: $(PDFLATEX) gnuplot ; \
	  TEXINPUTS=.:$(srcdir):${TEXINPUTS}: $(PDFLATEX) gnuplot ; \
	else \
	  echo pdflatex not found - cannot build pdf file ; \
	fi

### LaTeX documentation
tex: gnuplot.tex

gnuplot.tex: doc2tex $(srcdir)/gnuplot.doc
	./doc2tex $(srcdir)/gnuplot.doc gnuplot.tex

doc2tex: doc2tex.o termdoc.o
	$(LINK) doc2tex.o termdoc.o $(LIBS)

doc2tex.o: doc2tex.c $(BUILT_SOURCES)
	$(COMPILE) -DALL_TERM_DOC -c $(srcdir)/doc2tex.c

# this is how to make DVI files
dvi: gnuplot.dvi gpcard.dvi

gnuplot.dvi: gnuplot.tex titlepag.tex toc_entr.sty
	@if test $(LATEX) != no ; then \
	  TEXINPUTS=.:$(srcdir):${TEXINPUTS}: $(LATEX) gnuplot ; \
	  TEXINPUTS=.:$(srcdir):${TEXINPUTS}: $(LATEX) gnuplot ; \
	else \
	  echo "latex not found - cannot build dvi file" ; \
	fi

gpcard.dvi: gpcard.tex
	@if test $(PLAINTEX) != no ; then \
              TEXINPUTS=.:$(srcdir): tex gpcard ; \
	else \
	  echo "plaintex not found - cannot build dvi file" ; \
	fi

### Postscript format
# if pslatex has been installed, add "times" to titlepage.tex
ps: gnuplot.ps gpcard.ps

gnuplot.ps: gnuplot.dvi
	@if test $(DVIPS) != no ; then \
	   $(DVIPS) gnuplot.dvi -o gnuplot.ps ; \
	else \
	   echo "dvips not found - cannot build PS file" ; \
	fi

gpcard.ps: gpcard.dvi
	@if test $(DVIPS) != no ; then \
            $(DVIPS) gpcard.dvi -o gpcard.ps ; \
	else \
	   echo "dvips not found - cannot build PS file" ; \
	fi


# this is how to make gnuplot.hlp
hlp: gnuplot.hlp

gnuplot.hlp: doc2hlp $(srcdir)/gnuplot.doc
	./doc2hlp $(srcdir)/gnuplot.doc gnuplot.hlp

doc2hlp: doc2hlp.o termdoc.o
	$(LINK) doc2hlp.o termdoc.o $(LIBS)

### gnuplot interactive help format
gih: gnuplot.gih

gnuplot.gih: doc2gih $(srcdir)/gnuplot.doc
	@rm -f alldoc2gih
	./doc2gih $(srcdir)/gnuplot.doc gnuplot.gih

doc2gih: doc2gih.o termdoc.o
	$(LINK) doc2gih.o termdoc.o $(LIBS)

# To include all terminals in the .gih file
allgih: alldoc2gih $(srcdir)/gnuplot.doc
	@rm -f doc2gih
	./alldoc2gih $(srcdir)/gnuplot.doc gnuplot.gih

alldoc2gih: alldoc2gih.o termdoc.o
	$(LINK) alldoc2gih.o termdoc.o $(LIBS)

alldoc2gih.o: doc2gih.c $(BUILT_SOURCES)
	$(COMPILE) -DALL_TERM_DOC -c $(srcdir)/doc2gih.c
	@mv doc2gih.o alldoc2gih.o

### GNU info format
info: gnuplot.info

gnuplot.info: $(srcdir)/gnuplot.texi $(srcdir)/gnuplot.doc
	$(MAKEINFO) -I$(srcdir) $(srcdir)/gnuplot.texi --no-split --output=$@

# Thanks to Bruce Ravel for doc2texi.el!
gnuplot.texi: $(srcdir)/doc2texi.el $(srcdir)/gnuplot.doc
	@echo "Creating texinfo"
	@if test ! -f gnuplot.texi ; then \
	  cp $(srcdir)/gnuplot.texi . ; \
	fi
	@if test "$(EMACS)" != no; then \
	   $(EMACS) -batch -l $(srcdir)/doc2texi.el -f d2t-doc-to-texi; \
	else \
           @echo "No emacs found - cannot create texinfo file" ; \
	fi

# this is how to make OS/2 ipfc documentation
ipf: gnuplot.ipf

gnuplot.ipf: doc2ipf $(srcdir)/gnuplot.doc
	./doc2ipf $(srcdir)/gnuplot.doc gnuplot.ipf

doc2ipf: doc2ipf.o termdoc.o xref.o
	$(LINK) doc2ipf.o termdoc.o xref.o $(LIBS)

### Rich Text Format
rtf: gnuplot.rtf

gnuplot.rtf: doc2rtf $(srcdir)/gnuplot.doc
	./doc2rtf $(srcdir)/gnuplot.doc gnuplot.rtf

doc2rtf: doc2rtf.o termdoc.o xref.o
	$(LINK) doc2rtf.o termdoc.o xref.o $(LIBS)

# this is how to make rnh documentation (VMS help format)
rnh: gnuplot.rnh

gnuplot.rnh: doc2rnh $(srcdir)/gnuplot.doc
	./doc2rnh $(srcdir)/gnuplot.doc gnuplot.rnh

doc2rnh: doc2rnh.o termdoc.o
	$(LINK) doc2rnh.o termdoc.o $(LIBS)

### AmigaGuide(R) format
## requires the GG version of makeinfo
#guide: gnuplot.guide
#
#gnuplot.guide: $(srcdir)/gnuplot.texi $(srcdir)/gnuplot.doc
#	$(MAKEINFO) --amiga -I$(srcdir) $(srcdir)/gnuplot.texi --no-split --output=$@
#
# end doc2xxx section

# this is how to check the gnuplot.doc file
check: all checkdoc
	@./checkdoc < $(srcdir)/gnuplot.doc; \
	if test $$? -eq 0; then \
	  echo "PASS: gnuplot.doc"; \
	else \
	  :; \
	fi

checkdoc: checkdoc.o termdoc.o $(srcdir)/gnuplot.doc
	$(LINK) checkdoc.o termdoc.o $(LIBS)

checkdoc.o: checkdoc.c $(BUILT_SOURCES)
	$(COMPILE) -DALL_TERM_DOC -c $(srcdir)/checkdoc.c

# For Unix and MSDOS only
install: gnuplot.gih
	$(top_srcdir)/mkinstalldirs $(DESTDIR)$(datadir)
	$(INSTALL_DATA) gnuplot.gih $(DESTDIR)$(datadir)/gnuplot.gih

uninstall:
	rm -f $(DESTDIR)$(datadir)/gnuplot.gih

# for VMS only
install-vms: gnuplot.hlp
	$(INSTALL_DATA) gnuplot.hlp $(datadir)/gnuplot.hlp

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = docs


distdir: $(DISTFILES)
	distdir=`cd $(distdir) && pwd`
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done

clean-local:
	@test "$(top_srcdir)" = "$(top_builddir)" || rm -f gnuplot.texi

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)

clean-compile:
	rm -f *.o core *.core

clean: clean-local clean-generic clean-compile
	-rm -f *.exe *~

mostlyclean: clean

distclean: clean
	-rm -f Makefile

realclean: distclean
	-rm -f TAGS

Makefile: Makefile.in ../config.status
	cd .. \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

### Dependencies - do not edit!

# all doc2somethings depend on termdoc and either ../term.h or
# allterm.h, maybe this would be better as separate object file
# (but then we have to change all the other makefiles). Plus then
# we cannot make some doc2* filters use allterm.h and others use term.h

TERM_H = $(top_srcdir)/src/term.h

checkdoc.o: checkdoc.c ../config.h $(top_srcdir)/src/ansichek.h \
		$(top_srcdir)/src/stdfn.h doc2x.h allterm.h
alldoc2gih.o: doc2gih.c ../config.h $(top_srcdir)/src/ansichek.h \
		$(top_srcdir)/src/stdfn.h doc2x.h allterm.h
doc2gih.o: doc2gih.c ../config.h $(top_srcdir)/src/ansichek.h \
		$(top_srcdir)/src/stdfn.h doc2x.h $(TERM_H)
doc2hlp.o: doc2hlp.c ../config.h $(top_srcdir)/src/ansichek.h \
		$(top_srcdir)/src/stdfn.h doc2x.h $(TERM_H)
doc2ipf.o: doc2ipf.c ../config.h $(top_srcdir)/src/ansichek.h \
		$(top_srcdir)/src/stdfn.h doc2x.h $(TERM_H)
doc2ms.o: doc2ms.c ../config.h $(top_srcdir)/src/ansichek.h \
		$(top_srcdir)/src/stdfn.h doc2x.h allterm.h
doc2rnh.o: doc2rnh.c ../config.h $(top_srcdir)/src/ansichek.h \
		$(top_srcdir)/src/stdfn.h doc2x.h $(TERM_H)
doc2rtf.o: doc2rtf.c ../config.h $(top_srcdir)/src/ansichek.h \
		$(top_srcdir)/src/stdfn.h doc2x.h $(TERM_H)
doc2tex.o: doc2tex.c ../config.h $(top_srcdir)/src/ansichek.h \
		$(top_srcdir)/src/stdfn.h doc2x.h allterm.h
termdoc.o: termdoc.c ../config.h $(top_srcdir)/src/ansichek.h \
		$(top_srcdir)/src/stdfn.h doc2x.h
xref.o: xref.c ../config.h $(top_srcdir)/src/ansichek.h \
		$(top_srcdir)/src/stdfn.h doc2x.h xref.h

#the end
